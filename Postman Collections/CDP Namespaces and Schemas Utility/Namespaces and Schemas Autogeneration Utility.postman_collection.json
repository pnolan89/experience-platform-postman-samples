{
	"info": {
		"_postman_id": "46691402-0766-47a7-9657-fe538ce9e0bf",
		"name": "Adobe I/O Access Token Generation + Automate Namespace creation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Local Signing (Non-production use-only)",
			"item": [
				{
					"name": "IMS: JWT Generate + Auth via User Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"if (data.access_token) {",
									"    pm.environment.set(\"ACCESS_TOKEN\", data.access_token);",
									"} else {",
									"    console.log(\"Unable to acquire ACCESS_TOKEN from Adobe IMS to make further calls to Adobe I/O APIs.\")",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const ERROR_MESSAGE = \" not found in active environment. Please ensure the correct environment is selected and populated.\";",
									"const ENV_JS_RSA_SIGN_LIBRARY = \"ADOBE_IO_ACCESS_TOKEN__JS_RSA_SIGN_LIBRARY\";",
									"",
									"const JS_RSA_SIGN_LIBRARY_REQUEST = {",
									"    url: 'https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js',",
									"    method: 'GET'",
									"};",
									"",
									"if (!pm.environment.get(ENV_JS_RSA_SIGN_LIBRARY)) {",
									"    console.log(\"Loading JS RSA SIGN library from: \" + JS_RSA_SIGN_LIBRARY_REQUEST.url);",
									"",
									"    pm.sendRequest(JS_RSA_SIGN_LIBRARY_REQUEST, function (err, response) {",
									"        if (err === null) {",
									"            pm.environment.set(ENV_JS_RSA_SIGN_LIBRARY, response.text());",
									"            console.log(\"Successfully loaded JS RSA Sign library.\");",
									"            getAccessToken();",
									"        } else {",
									"            console.log(\"Could not load JS RSA Sign Library.\");",
									"        }",
									"    });",
									"} else {",
									"    // Already have the JS RSA Sign library loaded, so generate token immediately",
									"    getAccessToken();",
									"}",
									"",
									"// Tips from: https://github.com/kjur/jsrsasign/issues/199",
									"// https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWT-generation",
									"function getAccessToken() {",
									"    var navigator = {}; //fake a navigator object for the lib",
									"    var window = {}; //fake a window object for the lib",
									"",
									"    if (!pm.environment.get(ENV_JS_RSA_SIGN_LIBRARY)) {",
									"        throw new Error(\"Could not load JS RSA Sign Library from https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\");",
									"    } else if (!pm.environment.get(\"IMS_ORG\")) {",
									"        throw new Error(\"IMS_ORG\" + ERROR_MESSAGE);",
									"    } else if (!pm.environment.get(\"TECHNICAL_ACCOUNT_ID\")) {",
									"        throw new Error(\"TECHNICAL_ACCOUNT_ID\" + ERROR_MESSAGE);",
									"    } else if (!pm.environment.get(\"IMS\")) {",
									"        throw new Error(\"IMS\" + ERROR_MESSAGE);",
									"    } else if (!pm.environment.get(\"API_KEY\")) {",
									"        throw new Error(\"API_KEY\" + ERROR_MESSAGE);",
									"    } else if (!pm.environment.get(\"META_SCOPE\")) {",
									"        throw new Error(\"META_SCOPE\" + ERROR_MESSAGE);",
									"    } else if (!pm.environment.get(\"PRIVATE_KEY\")) {",
									"        throw new Error(\"Ensure the Private Key is added to both INITIAL and CURRENT VALUES in the active Postman environment's PRIVATE_KEY variable\");",
									"    }",
									"",
									"    eval(pm.environment.get(ENV_JS_RSA_SIGN_LIBRARY)); //import javascript jsrsasign",
									"",
									"    var header = {",
									"        \"alg\": \"RS256\"",
									"    };",
									"",
									"    var data = {",
									"        \"exp\": Math.round(87000 + Date.now() / 1000),",
									"        \"iss\": pm.environment.get(\"IMS_ORG\"),",
									"        \"sub\": pm.environment.get(\"TECHNICAL_ACCOUNT_ID\"),",
									"        \"aud\": \"https://\" + pm.environment.get(\"IMS\") + \"/c/\" + pm.environment.get(\"API_KEY\")",
									"    };",
									"",
									"    meta_scopes = pm.environment.get(\"META_SCOPE\");",
									"",
									"    if (typeof meta_scopes === 'string') {",
									"        console.log(\"meta_scopes is a string, converting to string array\");",
									"        meta_scopes = [ meta_scopes ];",
									"    }",
									"    ",
									"    if (!Array.isArray(meta_scopes)) {",
									"        throw new Error(\"Unable to coerce the META_SCOPE property value to a string array\");",
									"    }",
									"    ",
									"    meta_scopes.forEach(function (scope) {",
									"        var meta_scope = \"https://\" + pm.environment.get(\"IMS\") + \"/s/\" +",
									"            scope;",
									"        data[meta_scope] = true;",
									"    });",
									"",
									"    var secret = pm.environment.get(\"PRIVATE_KEY\");",
									"",
									"    if (!secret) {",
									"        console.log(\"Ensure the Private Key is added to both INITIAL and CURRENT VALUES in the active Postman environment's PRIVATE_KEY variable.\");",
									"    }",
									"",
									"    console.log(data);",
									"",
									"    var sHeader = JSON.stringify(header);",
									"    var sPayload = JSON.stringify(data);",
									"    var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, secret);",
									"",
									"    console.log(sJWT);",
									"",
									"    pm.environment.set(\"JWT_TOKEN\", sJWT);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "{{API_KEY}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"type": "text"
								},
								{
									"key": "jwt_token",
									"value": "{{JWT_TOKEN}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{IMS}}/ims/exchange/jwt/",
							"protocol": "https",
							"host": [
								"{{IMS}}"
							],
							"path": [
								"ims",
								"exchange",
								"jwt",
								""
							]
						},
						"description": "Local signing leverages a 3rd party JSR Assign Crypto library to be loaded and locally sign the JWT Token using the provided Private Key. Using this method the Private Key even leaves the local machine, however 3rd party JavaScript is loaded into the Postman context.\n\n"
					},
					"response": []
				}
			],
			"description": "This API call genereated the signed JWT Token locally and the Private Key does not leave this machine, however this set of API calls does load the JSR Assign Crypto library from a non-Adone end-point (https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js), therefore it not recommended for use with Production credentials.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Lists all identity namespaces available for the IMS Organization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/** Begin Adobe-provided Pre-Request Scripts **/",
							"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
							"pm.request.headers.each(header => {",
							"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
							"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
							"    }",
							"});",
							"",
							"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
							"pm.request.url.query.remove(q => { ",
							"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
							"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
							"    } ",
							"});",
							"/** End Adobe-provided Pre-Request Scripts **/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get response",
							"var results = pm.response.json();",
							"",
							"var resultLength = results.length;",
							"console.log(\"Namespace results size: \", resultLength);",
							"pm.environment.set('namespacesLength', resultLength);",
							"pm.environment.set('namespacesResult', JSON.stringify(results));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text",
						"description": "The access token which can be copied from your Experience Platform integration, prefixed with \"Bearer \".  For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html)."
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text",
						"description": "The API key which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html)."
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text",
						"description": "The Organization ID which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html)."
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text",
						"description": "Identifies the Adobe Experience Platform sandbox to use. Default sandbox is 'prod'"
					}
				],
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/core/idnamespace/identities",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"core",
						"idnamespace",
						"identities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Identity Namespace",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/** Begin Adobe-provided Pre-Request Scripts **/",
							"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
							"pm.request.headers.each(header => {",
							"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
							"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
							"    }",
							"});",
							"",
							"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
							"pm.request.url.query.remove(q => {",
							"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
							"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
							"    }",
							"});",
							"/** End Adobe-provided Pre-Request Scripts **/",
							"",
							"// TEST values",
							"/*",
							"var marketoEntityNames = [\"person\", \"company\"];",
							"var marketoIdentityTypes = [\"CROSS_DEVICE\", \"B2B_ACCOUNT\"];",
							"var salesforceEntityNames = [\"person\", \"account\"];",
							"var salesforceIdentityTypes = [\"CROSS_DEVICE\", \"B2B_ACCOUNT\"];",
							"var dynamicsEntityNames = [\"person\", \"account\"];",
							"var dynamicsIdentityTypes = [\"CROSS_DEVICE\", \"B2B_ACCOUNT\"];",
							"*/",
							"// PROD values ",
							"",
							"var marketoEntityNames = [\"company\", \"person\", \"opportunity\", \"opportunity contact role\", \"program\", \"program member\", \"static list\", \"static list member\"];",
							"",
							"var marketoIdentityTypes = [\"B2B_ACCOUNT\", \"CROSS_DEVICE\", \"B2B_OPPORTUNITY\", \"B2B_OPPORTUNITY_PERSON\", \"B2B_CAMPAIGN\", \"B2B_CAMPAIGN_MEMBER\", \"B2B_MARKETING_LIST\", \"B2B_MARKETING_LIST_MEMBER\"];",
							"",
							"var salesforceEntityNames = [\"account\", \"lead\", \"opportunity\", \"opportunity contact role\", \"campaign\", \"campaign member\"];",
							"",
							"var salesforceIdentityTypes = [\"B2B_ACCOUNT\", \"CROSS_DEVICE\", \"B2B_OPPORTUNITY\", \"B2B_OPPORTUNITY_PERSON\", \"B2B_CAMPAIGN\", \"B2B_CAMPAIGN_MEMBER\", \"B2B_MARKETING_LIST\", \"B2B_MARKETING_LIST_MEMBER\"];",
							"",
							"var dynamicsEntityNames = [\"account\", \"person\", \"opportunity\", \"opportunity contact connection\", \"campaign\", \"campaign member\"];",
							"",
							"var dynamicsIdentityTypes = [\"B2B_ACCOUNT\", \"CROSS_DEVICE\", \"B2B_OPPORTUNITY\", \"B2B_OPPORTUNITY_PERSON\", \"B2B_CAMPAIGN\", \"B2B_CAMPAIGN_MEMBER\", \"B2B_MARKETING_LIST\", \"B2B_MARKETING_LIST_MEMBER\"];",
							"",
							"var namespacesToCreate = pm.environment.get(\"namespacesToCreate\");",
							"if_abm = pm.environment.get(\"has_abm\");",
							"if (!namespacesToCreate && if_abm == \"true\") {",
							"    console.log(\"ABM flag is true\");",
							"    marketoEntityNames.splice(1,0, \"named account\");",
							"    marketoIdentityTypes.splice(1,0, \"B2B_ACCOUNT\");",
							"}",
							"",
							"console.log(\"Coming here to create namespaces\");",
							"var availableNamespaces = pm.environment.get(\"availableNamespaces\");",
							"if (!availableNamespaces) {",
							"    availableNamespaces = [];",
							"    // build \"display-name\" list only for the first time",
							"    // Utilize values set in env variables for the next times",
							"    var namespacesResult = JSON.parse(pm.environment.get('namespacesResult'));",
							"    var namespacesLength = pm.environment.get('namespacesLength');",
							"",
							"    // browse through existing namespaces and prepare list of available namespaces",
							"    for (var i = 0; i < namespacesLength; i++) {",
							"        availableNamespaces.push(namespacesResult[i].name);",
							"    }",
							"    // set available namespace \"display-names\"",
							"    pm.environment.set(\"availableNamespaces\", availableNamespaces);",
							"}",
							"",
							"var allIssuerEntityTypes = pm.environment.get(\"allIssuerEntityTypes\");",
							"var allIdentityTypes = pm.environment.get(\"allIdentityTypes\");",
							"var munchkinId = pm.environment.get(\"munchkinId\");",
							"var isSfdc = pm.environment.get(\"sfdc_org_id\");",
							"var isMsd = pm.environment.get(\"msd_org_id\");",
							"if (!munchkinId) {",
							"    pm.environment.unset(\"namespacesLength\");",
							"    pm.environment.unset(\"namespacesResult\");",
							"    pm.environment.unset(\"availableNamespaces\");",
							"    throw new Error(\"Marketo munchkinId is not provided as an environment variable\");",
							"} else if (isSfdc && isMsd) {",
							"    pm.environment.unset(\"namespacesLength\");",
							"    pm.environment.unset(\"namespacesResult\");",
							"    pm.environment.unset(\"availableNamespaces\");",
							"    throw new Error('Provide either MSD or SFDC org ID, you can not provide both');",
							"}",
							"else {",
							"    var checkIfFirstTime = namespacesToCreate;",
							"    if (!checkIfFirstTime) {",
							"        namespacesToCreate = [];",
							"        allIssuerEntityTypes = [];",
							"        allIdentityTypes = [];",
							"        // prepare list of marketo namespaces to create and next time use this list from env variables",
							"",
							"        // prepare set of Marketo Namespace names using munchkinId and list of entities",
							"        // prepare list of namespaces to create",
							"        // ie. marketo + \"_\" + person + \"_\" + MUNCHKINID",
							"        console.log(\"Marketo Namespaces to Create\");",
							"        for (var i = 0; i < marketoEntityNames.length; i++) {",
							"            var tempEntityName = marketoEntityNames[i];",
							"            tempEntityName = tempEntityName.replace(/ /g, \"_\"); // replace space with underscore",
							"            // display name of Namespace - Name parameter",
							"            var namespaceName = \"marketo\" + \"_\" + tempEntityName + \"_\" + munchkinId;",
							"            console.log(namespaceName);",
							"            namespacesToCreate.push(namespaceName);",
							"            allIssuerEntityTypes.push(marketoEntityNames[i]);",
							"            allIdentityTypes.push(marketoIdentityTypes[i]);",
							"        }",
							"        console.log(\"Coming here to add list of marketo namespace.....\");",
							"        console.log(namespacesToCreate);",
							"        var namespaceArrayNames = namespacesToCreate.slice(); // store namespaces",
							"        pm.environment.set(\"namespaceArrayNames\", namespaceArrayNames);",
							"        console.log(\"value of namespaceArray is: \" , namespaceArrayNames);",
							"    }",
							"    if (!checkIfFirstTime && isSfdc) {",
							"        namespacesToCreateSfdc = [];",
							"        console.log(\"Salesforce Namespaces to Create\");",
							"        for (var i = 0; i < salesforceEntityNames.length; i++) {",
							"            var tempEntityName = salesforceEntityNames[i];",
							"            tempEntityName = tempEntityName.replace(/ /g, \"_\"); // replace space with underscore",
							"            // display name of Namespace - Name parameter",
							"            var namespaceName = \"salesforce\" + \"_\" + tempEntityName + \"_\" + isSfdc;",
							"            console.log(namespaceName);",
							"            namespacesToCreate.push(namespaceName);",
							"            namespacesToCreateSfdc.push(namespaceName);",
							"            allIssuerEntityTypes.push(salesforceEntityNames[i]);",
							"            allIdentityTypes.push(salesforceIdentityTypes[i]);",
							"        }",
							"        var secondaryNamespaceArrayNames = namespacesToCreateSfdc;",
							"        pm.environment.set(\"secondaryNamespaceArrayNames\", secondaryNamespaceArrayNames);",
							"    }",
							"    if (!checkIfFirstTime && isMsd) {",
							"        namespacesToCreateMsd = [];",
							"        console.log(\"Microsoft Namespaces to Create\");",
							"        for (var i = 0; i < dynamicsEntityNames.length; i++) {",
							"            var tempEntityName = dynamicsEntityNames[i];",
							"            tempEntityName = tempEntityName.replace(/ /g, \"_\"); // replace space with underscore",
							"            // display name of Namespace - Name parameter",
							"            var namespaceName = \"microsoft\" + \"_\" + tempEntityName + \"_\" + isMsd;",
							"            console.log(namespaceName);",
							"            namespacesToCreate.push(namespaceName);",
							"            namespacesToCreateMsd.push(namespaceName);",
							"            var tempMsdIdentityType = dynamicsEntityNames[i];",
							"            if(tempMsdIdentityType == \"opportunity contact connection\") ",
							"                tempMsdIdentityType = \"opportunity relationship\";",
							"            allIssuerEntityTypes.push(tempMsdIdentityType);",
							"            allIdentityTypes.push(dynamicsIdentityTypes[i]);",
							"        }",
							"        var secondaryNamespaceArrayNames = namespacesToCreateMsd;",
							"        pm.environment.set(\"secondaryNamespaceArrayNames\", secondaryNamespaceArrayNames);",
							"    }",
							"    // we just need this to pass to XDM autogen utility",
							"    //pm.environment.set(\"namespacesListToCreate\", namespacesToCreate);",
							"}",
							"",
							"",
							"//     <!-- sample request body -->        ",
							"// {",
							"//   \"description\": \"custom namespace - sample\",",
							"//   \"idType\": \"B2B_Acount\",",
							"//   \"name\": \"CRMID-LoyaltyCardNumber\"",
							"//    \"attributes\":{",
							"//                       \"issuerType\": \"marketo\",",
							"//                       \"issuerInstanceId\": \"M1\",",
							"//                       \"issuerEntityType\": \"account\"",
							"//                      }",
							"// }",
							"",
							"",
							"var currDisplayName = namespacesToCreate.shift(); // display name ",
							"",
							"// when it's end of namespaces to create, do not make any request",
							"// clear out environment variables and stop the execution of script",
							"if(!currDisplayName) {",
							"    // clear out env variables which were used in the script ",
							"    console.log(\"That's end of the script\");",
							"    pm.environment.unset(\"namespacesLength\");",
							"    pm.environment.unset(\"namespacesResult\");",
							"    pm.environment.unset(\"availableNamespaces\");",
							"    pm.environment.unset(\"code\");",
							"    pm.environment.unset(\"currDescription\");",
							"    pm.environment.unset(\"currDisplayName\");",
							"    pm.environment.unset(\"currIdentityType\");",
							"    pm.environment.unset(\"currIssuerEntityType\");",
							"    pm.environment.unset(\"currIssuerInstanceId\");",
							"    pm.environment.unset(\"currIssuerType\");",
							"    pm.environment.unset(\"description\");",
							"    pm.environment.unset(\"descriptionList\");",
							"    pm.environment.unset(\"marketoNamespacesList\");",
							"    pm.environment.unset(\"namespacesToCreateMkto\");",
							"    pm.environment.unset(\"randomNumbers\");",
							"    pm.environment.unset(\"namespacesToCreate\");",
							"    pm.environment.unset(\"allIssuerEntityTypes\");",
							"    pm.environment.unset(\"allIdentityTypes\");",
							"    //throw new Error(\"This is not an error. It's the end of script execution\"); // hacky way to stop request execution",
							"    postman.setNextRequest(\"Lists all namespaces\");",
							"}",
							"",
							"var currIdentityType = allIdentityTypes.shift(); // identity type",
							"var currDescription = \"Namespace \" +  currDisplayName + \" created for B2B ingestion purpose\"",
							"",
							"// metadata attributes",
							"var currIssuerEntityType = allIssuerEntityTypes.shift(); // issuer entity type ",
							"var currIssuerType = currDisplayName.startsWith(\"marketo\") ? \"marketo\" : (currDisplayName.startsWith(\"salesforce\") ? \"salesforce\" : \"microsoft\");",
							"var currIssuerInstanceId = currDisplayName.startsWith(\"marketo\") ? munchkinId : (currDisplayName.startsWith(\"salesforce\") ? isSfdc : isMsd);",
							"",
							"pm.environment.set(\"currDisplayName\", currDisplayName);",
							"pm.environment.set(\"currIdentityType\", currIdentityType);",
							"pm.environment.set(\"currDescription\", currDescription);",
							"pm.environment.set(\"currIssuerEntityType\", currIssuerEntityType);",
							"pm.environment.set(\"currIssuerType\", currIssuerType);",
							"pm.environment.set(\"currIssuerInstanceId\", currIssuerInstanceId);",
							"",
							"pm.environment.set(\"namespacesToCreate\", namespacesToCreate);",
							"pm.environment.set(\"allIdentityTypes\", allIdentityTypes);",
							"pm.environment.set(\"allIssuerEntityTypes\", allIssuerEntityTypes);",
							"",
							"if (availableNamespaces.indexOf(currDisplayName) >= 0) {",
							"    // it will still go ahead and try with creation of duplicate and fail",
							"    // but we are providing customer with appropriate message",
							"    console.warn(\"Namespace already exists with name \", currDisplayName);",
							"} else {",
							"    // Creating a new namespace",
							"    console.log(\"Creating namespace \", currDisplayName);",
							"    console.log(\"request parameters : \", currDescription, currIdentityType, currDisplayName, currIssuerType, currIssuerEntityType, currIssuerInstanceId);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var currDisplayName = pm.environment.get(\"currDisplayName\");",
							"var currIdentityType = currIdentityType = pm.environment.get(\"currIdentityType\");",
							"var currDescription = pm.environment.get(\"currDescription\");",
							"var currIssuerEntityType = pm.environment.get(\"currIssuerEntityType\");",
							"var currIssuerType = pm.environment.get(\"currIssuerType\"); ",
							"var currIssuerInstanceId = pm.environment.get(\"currIssuerInstanceId\");",
							"var namespacesToCreate = pm.environment.get(\"namespacesToCreate\");",
							"",
							"if(namespacesToCreate && namespacesToCreate.length > 0) {",
							"    postman.setNextRequest(pm.info.requestName);",
							"}",
							"else {",
							"    console.log(\"End of creation of namespaces\");",
							"    postman.setNextRequest(\"Collect codes for namspaces\");",
							"    // clear out env variables which were used in the script ",
							"    pm.environment.unset(\"namespacesLength\");",
							"    pm.environment.unset(\"namespacesResult\");",
							"    pm.environment.unset(\"availableNamespaces\");",
							"    pm.environment.unset(\"code\");",
							"    pm.environment.unset(\"currDescription\");",
							"    pm.environment.unset(\"currDisplayName\");",
							"    pm.environment.unset(\"currIdentityType\");",
							"    pm.environment.unset(\"currIssuerEntityType\");",
							"    pm.environment.unset(\"currIssuerInstanceId\");",
							"    pm.environment.unset(\"currIssuerType\");",
							"    pm.environment.unset(\"description\");",
							"    pm.environment.unset(\"descriptionList\");",
							"    pm.environment.unset(\"marketoNamespacesList\");",
							"    pm.environment.unset(\"namespacesToCreateMkto\");",
							"    pm.environment.unset(\"randomNumbers\");",
							"    pm.environment.unset(\"namespacesToCreate\");",
							"    pm.environment.unset(\"allIssuerEntityTypes\");",
							"    pm.environment.unset(\"allIdentityTypes\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"{{currDescription}}\",\n    \"idType\": \"{{currIdentityType}}\",\n    \"name\": \"{{currDisplayName}}\",\n    \"attributes\":{\n        \"issuerType\": \"{{currIssuerType}}\",\n        \"issuerEntityType\":\"{{currIssuerEntityType}}\",\n        \"issuerInstanceId\": \"{{currIssuerInstanceId}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/core/idnamespace/identities",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"core",
						"idnamespace",
						"identities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Collect codes for namspaces",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/** Begin Adobe-provided Pre-Request Scripts **/",
							"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
							"pm.request.headers.each(header => {",
							"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
							"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
							"    }",
							"});",
							"",
							"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
							"pm.request.url.query.remove(q => { ",
							"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
							"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
							"    } ",
							"});",
							"/** End Adobe-provided Pre-Request Scripts **/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var results = pm.response.json();",
							"var namespaceResults = results;",
							"",
							"console.log(\"namespaceResults: \" , namespaceResults);",
							"var allNames = [];",
							"for (var i = 0; i < namespaceResults.length; i++) {",
							"    allNames.push(namespaceResults[i].name);",
							"}",
							"console.log(\"allNames : \", allNames);",
							"",
							"var namespaceArrayNames = pm.environment.get(\"namespaceArrayNames\");",
							"var secondaryNamespaceArrayNames = pm.environment.get(\"secondaryNamespaceArrayNames\");",
							"var allNamespaces = [];",
							"",
							"console.log(\"namespaceArrayNames:\" , namespaceArrayNames);",
							"console.log(\"secondaryNamespaceArrayNames:\", secondaryNamespaceArrayNames);",
							"if(namespaceArrayNames) {",
							"    console.log(\"adding marketo namespaces\");",
							"    allNamespaces.push(...namespaceArrayNames);",
							"}",
							"if(secondaryNamespaceArrayNames) {",
							"    console.log(\"adding crm namespaces\");",
							"    allNamespaces.push(...secondaryNamespaceArrayNames);",
							"}",
							"console.log(\"All namespaces \" , allNamespaces);",
							"// store code information",
							"namespaceArray = [];",
							"secondaryNamespaceArray = [];",
							"for (var i = 0; i < allNamespaces.length; i++) {",
							"    var name = allNamespaces[i];",
							"    var indx = allNames.indexOf(allNamespaces[i]);",
							"    if(indx != -1) {",
							"        console.log(\"Adding code for namespace \", name);",
							"        name.startsWith(\"marketo\") ? namespaceArray.push(namespaceResults[indx].code) ",
							"                : secondaryNamespaceArray.push(namespaceResults[indx].code);",
							"    }",
							"}",
							"console.log('namespaceArray: ' + namespaceArray.join());",
							"pm.environment.set(\"namespaceArray\" , namespaceArray);",
							"pm.environment.set(\"secondaryNamespaceArray\", secondaryNamespaceArray);",
							"pm.environment.unset(\"namespaceArrayNames\");",
							"pm.environment.unset(\"secondaryNamespaceArrayNames\");",
							"",
							"postman.setNextRequest('Get Schemas'); // CHANGE with next script"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text",
						"description": "The access token which can be copied from your Experience Platform integration, prefixed with \"Bearer \".  For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html)."
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text",
						"description": "The API key which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html)."
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text",
						"description": "The Organization ID which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html)."
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text",
						"description": "Identifies the Adobe Experience Platform sandbox to use. Default sandbox is 'prod'"
					}
				],
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/core/idnamespace/identities",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"core",
						"idnamespace",
						"identities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Schemas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response info from get schemas",
							"var resultsArray = pm.response.json().results;",
							"var resultsArrayLength = resultsArray.length;",
							"",
							"//For all mixins",
							"var mixinArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
							"pm.environment.set('mixinArray', mixinArray);",
							"",
							"//for all relationships",
							"var relationshipArray = [0, 0, 0, 0, 0, 0, 0, 0];",
							"pm.environment.set('relationshipArray', relationshipArray);",
							"",
							"//for all legacy relationships",
							"let legacyRelationshipArray = [0,0,0,0,0];",
							"pm.environment.set('legacyRelationshipArray', legacyRelationshipArray);",
							"",
							"//for all legacy relationship descriptors",
							"let descriptorRefIdentityArray = [0,0,0,0,0,0,0,0,0,0];",
							"pm.environment.set('descriptorRefIdentityArray',descriptorRefIdentityArray);",
							"",
							"//create array to store all values if profile is enabled on a schema",
							"var profileEnabledArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
							"pm.environment.set('profileEnabledArray', profileEnabledArray);",
							"",
							"//create an array to store our schema Ids in",
							"var schemaIdArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
							"pm.environment.set('schemaIdArray', schemaIdArray);",
							"",
							"//create an array to store schema alt Ids in",
							"var schemaAltIdArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
							"pm.environment.set('schemaAltIdArray', schemaAltIdArray);",
							"",
							"//create an array to store the entity types that we find",
							"var discoveredEntityArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
							"pm.environment.set('discoveredEntityArray', discoveredEntityArray);",
							"",
							"//create an array to store the entity types that we find",
							"var relationshipSchemaArray = [0,0,0,0,0,0,0,0,0,0];",
							"pm.environment.set('relationshipSchemaArray', relationshipSchemaArray);",
							"",
							"//get the munchkin to generate the appropriate names",
							"let munchkinId = pm.environment.get('munchkinId');",
							"",
							"console.warn('The environment variable \"has_abm\" has a default value of \"false\". If you have ABM please change the value of \"has_abm\" in the environment variables to \"true\".');",
							"let hasAbm = pm.environment.get('has_abm');",
							"let hasMsi = pm.environment.get('has_msi');",
							"",
							"let entityMixinArray = [\"Marketo Company\",\"Marketo Named Account\",\"Marketo Person\", \"Marketo Person\",\"Marketo Opportunity\",\"Marketo Program\",\"Marketo Program Member\",\"Remove From List\", \"Visit Webpage\", \"Person Identifier\",\"Marketo Web URL\",\"New Lead\",\"Convert Lead\",\"Add To List\",\"Add To Opportunity\",\"Remove From Opportunity\",\"Interesting Moment\",\"Form Filled Out\",\"Link Clicks\",\"Email Delivered\",\"Email Bounced\",\"Email Unsubscribed\",\"Email Opened\",\"Email Clicked\",\"Email Bounced Soft\",\"Score Changed\",\"Opportunity Updated\",\"Status in Campaign Progression Changed\",\"Identity Map\"];",
							"",
							"pm.environment.set('relationshipSourcePropertyArray', '[\"/personComponents[*]/sourceAccountID\",\"/accountID\",\"/personID\",\"/opportunityID\",\"/personID\",\"/campaignID\",\"/personID\",\"/marketingListID\",\"/accountParentID\"]');",
							"pm.environment.set('relationshipDestinationPropertyArray','[\"/accountID\",\"/accountID\",\"/personID\",\"/opportunityID\",\"/personID\",\"/campaignID\",\"/personID\",\"/marketingListID\"]');",
							"",
							"//setting up namespace arrays",
							"let primaryIdentityArray = pm.environment.get('namespaceArray');",
							"if(pm.environment.has('secondaryNamespaceArray'))",
							"{",
							"    pm.environment.set('hasSecondary', 'true');",
							"} else {",
							"    pm.environment.set('hasSecondary', 'false');",
							"}",
							"",
							"if (hasAbm == \"false\") {",
							"    pm.environment.set('mixinIdArray', '[\"https://ns.adobe.com/xdm/mixins/account-details\",\"1\",\"https://ns.adobe.com/xdm/mixins/b2b-person-details\",\"https://ns.adobe.com/xdm/mixins/b2b-person-components\",\"https://ns.adobe.com/xdm/mixins/opportunity-details\",\"https://ns.adobe.com/xdm/mixins/campaign-details\",\"https://ns.adobe.com/xdm/context/campaign-member-details\",\"https://ns.adobe.com/xdm/mixins/events/remove-from-list\",\"https://ns.adobe.com/xdm/mixins/events/visit-webpage\",\"https://ns.adobe.com/xdm/mixins/person-identifier\",\"https://ns.adobe.com/b2b/marketo/marketo-web-url\",\"https://ns.adobe.com/xdm/mixins/events/new-lead\",\"https://ns.adobe.com/xdm/mixins/events/convert-lead\",\"https://ns.adobe.com/xdm/mixins/events/add-to-list\",\"https://ns.adobe.com/xdm/mixins/events/add-to-opportunity\",\"https://ns.adobe.com/xdm/mixins/events/remove-from-opportunity\",\"https://ns.adobe.com/xdm/mixins/events/interesting-moment\",\"https://ns.adobe.com/xdm/mixins/events/formfilledout\",\"https://ns.adobe.com/xdm/mixins/events/linkclicks\",\"https://ns.adobe.com/xdm/mixins/events/emaildelivered\",\"https://ns.adobe.com/xdm/mixins/events/emailbounced\",\"https://ns.adobe.com/xdm/mixins/events/emailunsubscribed\",\"https://ns.adobe.com/xdm/mixins/events/emailopened\",\"https://ns.adobe.com/xdm/mixins/events/emailclicked\",\"https://ns.adobe.com/xdm/mixins/events/emailbouncedsoft\",\"https://ns.adobe.com/xdm/mixins/events/scorechanged\",\"https://ns.adobe.com/xdm/mixins/events/opportunityupdated\",\"https://ns.adobe.com/xdm/mixins/events/statusincampaignprogressionchanged\",\"https://ns.adobe.com/xdm/context/identitymap\"]');",
							"    pm.environment.set('marketoEntityArray', '[\"Marketo Company \",\"1\",\"Marketo Person \",\"Marketo Opportunity \",\"Marketo Opportunity Contact Role \",\"Marketo Program \",\"Marketo Program Member \",\"Marketo Static List \",\"Marketo Static List Member \",\"Marketo Activity \"]');",
							"    pm.environment.set('classIdArray', '[\"https://ns.adobe.com/xdm/context/account\",\"https://ns.adobe.com/xdm/context/profile\",\"https://ns.adobe.com/xdm/context/opportunity\",\"https://ns.adobe.com/xdm/classes/opportunity-person\",\"https://ns.adobe.com/xdm/classes/campaign\",\"https://ns.adobe.com/xdm/context/campaign-member\",\"https://ns.adobe.com/xdm/classes/marketing-list\",\"https://ns.adobe.com/xdm/classes/marketing-list-member\",\"https://ns.adobe.com/xdm/context/experienceevent\"]');",
							"    pm.environment.set('sourcePropertyArray', '[\"/accountID\",\"1\",\"/personID\",\"/opportunityID\",\"/opportunityPersonID\",\"/campaignID\",\"/campaignMemberID\",\"/marketingListID\",\"/marketingListMemberID\",\"/personID\",\"/extSourceSystemAudit/externalID\"]');",
							"    //we need to splice in a 1 to trick our for loop at the end as this array is defined with all entities including named account",
							"    pm.environment.set('discoveredEntityArray', discoveredEntityArray.splice(1, 1, 1));",
							"    entityMixinArray.splice(1,1,1);",
							"    mixinArray.splice(1,1,1);",
							"    primaryIdentityArray.splice(1,0,1);",
							"} else {",
							"    pm.environment.set('mixinIdArray', '[\"https://ns.adobe.com/xdm/mixins/account-details\",\"https://ns.adobe.com/xdm/mixins/account-details\",\"https://ns.adobe.com/xdm/mixins/b2b-person-details\",\"https://ns.adobe.com/xdm/mixins/b2b-person-components\",\"https://ns.adobe.com/xdm/mixins/opportunity-details\",\"https://ns.adobe.com/xdm/mixins/campaign-details\",\"https://ns.adobe.com/xdm/context/campaign-member-details\",\"https://ns.adobe.com/xdm/mixins/events/remove-from-list\",\"https://ns.adobe.com/xdm/mixins/events/visit-webpage\",\"https://ns.adobe.com/xdm/mixins/person-identifier\",\"https://ns.adobe.com/b2b/marketo/marketo-web-url\",\"https://ns.adobe.com/xdm/mixins/events/new-lead\",\"https://ns.adobe.com/xdm/mixins/events/convert-lead\",\"https://ns.adobe.com/xdm/mixins/events/add-to-list\",\"https://ns.adobe.com/xdm/mixins/events/add-to-opportunity\",\"https://ns.adobe.com/xdm/mixins/events/remove-from-opportunity\",\"https://ns.adobe.com/xdm/mixins/events/interesting-moment\",\"https://ns.adobe.com/xdm/mixins/events/formfilledout\",\"https://ns.adobe.com/xdm/mixins/events/linkclicks\",\"https://ns.adobe.com/xdm/mixins/events/emaildelivered\",\"https://ns.adobe.com/xdm/mixins/events/emailbounced\",\"https://ns.adobe.com/xdm/mixins/events/emailunsubscribed\",\"https://ns.adobe.com/xdm/mixins/events/emailopened\",\"https://ns.adobe.com/xdm/mixins/events/emailclicked\",\"https://ns.adobe.com/xdm/mixins/events/emailbouncedsoft\",\"https://ns.adobe.com/xdm/mixins/events/scorechanged\",\"https://ns.adobe.com/xdm/mixins/events/opportunityupdated\",\"https://ns.adobe.com/xdm/mixins/events/statusincampaignprogressionchanged\",\"https://ns.adobe.com/xdm/context/identitymap\"]');",
							"    pm.environment.set('marketoEntityArray', '[\"Marketo Company \",\"Marketo Named Account \",\"Marketo Person \",\"Marketo Opportunity \",\"Marketo Opportunity Contact Role \",\"Marketo Program \",\"Marketo Program Member \",\"Marketo Static List \",\"Marketo Static List Member \",\"Marketo Activity \"]');",
							"    pm.environment.set('classIdArray', '[\"https://ns.adobe.com/xdm/context/account\",\"https://ns.adobe.com/xdm/context/account\",\"https://ns.adobe.com/xdm/context/profile\",\"https://ns.adobe.com/xdm/context/opportunity\",\"https://ns.adobe.com/xdm/classes/opportunity-person\",\"https://ns.adobe.com/xdm/classes/campaign\",\"https://ns.adobe.com/xdm/context/campaign-member\",\"https://ns.adobe.com/xdm/classes/marketing-list\",\"https://ns.adobe.com/xdm/classes/marketing-list-member\",\"https://ns.adobe.com/xdm/context/experienceevent\"]');",
							"    pm.environment.set('sourcePropertyArray', '[\"/accountID\",\"/accountID\",\"/personID\",\"/opportunityID\",\"/opportunityPersonID\",\"/campaignID\",\"/campaignMemberID\",\"/marketingListID\",\"/marketingListMemberID\",\"/personID\",\"/extSourceSystemAudit/externalID\"]');",
							"}",
							"",
							"primaryIdentityArray.splice(9,0,primaryIdentityArray[2]);",
							"pm.environment.set('namespaceArray',primaryIdentityArray);",
							"let mixinIdArray = JSON.parse(pm.environment.get('mixinIdArray'));",
							"let starterMarketoEntityArray = JSON.parse(pm.environment.get('marketoEntityArray'));",
							"let marketoEntityArray = starterMarketoEntityArray.map(x => x + munchkinId);",
							"if(hasAbm == \"false\")",
							"{",
							"    marketoEntityArray.splice(1, 1, 1);",
							"}",
							"",
							"//iterate through response array to grab important info for subsequent calls",
							"for (let i = 0; i < resultsArrayLength; i++) {",
							"    var arrayItem = resultsArray[i];",
							"    if (arrayItem.title == marketoEntityArray[0]) {",
							"        console.log('Marketo Company Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 0);",
							"        mixinArray.splice(0, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[0]));",
							"    }",
							"    if (hasAbm == \"true\" && arrayItem.title == marketoEntityArray[1]) {",
							"        console.log('Marketo Named Account Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 1);",
							"        mixinArray.splice(1, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[1]));",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[2]) {",
							"        console.log('Marketo Person Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 2);",
							"        mixinArray.splice(2, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[2]));",
							"        mixinArray.splice(3, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[3]));",
							"        mixinArray.splice(28, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[28]));",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[3]) {",
							"        console.log('Marketo Opportunity Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 3);",
							"        mixinArray.splice(4, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[4]));",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[4]) {",
							"        console.log('Marketo Opportunity Contact Role Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 4);",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[5]) {",
							"        console.log('Marketo Program Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 5);",
							"        mixinArray.splice(5, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[5]));",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[6]) {",
							"        console.log('Marketo Program Member Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 6);",
							"        mixinArray.splice(6, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[6]));",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[7]) {",
							"        console.log('Marketo Static List Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 7);",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[8]) {",
							"        console.log('Marketo Static List Member Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 8);",
							"    }",
							"    if (arrayItem.title == marketoEntityArray[9]) {",
							"        console.log('Marketo Activity Schema already exists, adding to array');",
							"        storeIdValues(arrayItem, 9);",
							"        mixinArray.splice(7, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[7]));",
							"        mixinArray.splice(8, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[8]));",
							"        mixinArray.splice(9, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[9]));",
							"        mixinArray.splice(10, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[10]));",
							"        mixinArray.splice(11, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[11]));",
							"        mixinArray.splice(12, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[12]));",
							"        mixinArray.splice(13, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[13]));",
							"        mixinArray.splice(14, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[14]));",
							"        mixinArray.splice(15, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[15]));",
							"        if(hasMsi == 'false')",
							"        {",
							"            mixinArray.splice(16,1,1);",
							"        } else {",
							"            mixinArray.splice(16, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[16]));",
							"        }",
							"        mixinArray.splice(17, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[17]));",
							"        mixinArray.splice(18, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[18]));",
							"        mixinArray.splice(19, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[19]));",
							"        mixinArray.splice(20, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[20]));",
							"        mixinArray.splice(21, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[21]));",
							"        mixinArray.splice(22, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[22]));",
							"        mixinArray.splice(23, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[23]));",
							"        mixinArray.splice(24, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[24]));",
							"        mixinArray.splice(25, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[25]));",
							"        mixinArray.splice(26, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[26]));",
							"        mixinArray.splice(27, 1, traverseAllOfArrayForRef(arrayItem.allOf, mixinIdArray[27]));",
							"    }",
							"}",
							"//Set the mixinArray after all splicing has been done",
							"pm.environment.set('mixinArray', mixinArray);",
							"pm.environment.set('discoveredEntityArray', discoveredEntityArray);",
							"",
							"//Store results array for future use - TEMPORARY FOR DEV",
							"pm.environment.set('resultsArrayLength', resultsArrayLength);",
							"pm.environment.set('resultsArray', JSON.stringify(resultsArray));",
							"",
							"//setting in case going to create schemas",
							"pm.environment.set('hasRemovedAbmElement', \"false\");",
							"",
							"//===============================Check What Exists===============================\\\\",
							"var numberToCreate = 0;",
							"let schemaListToCreate = [];",
							"for (let i = 0; i < discoveredEntityArray.length; i++) {",
							"    if (discoveredEntityArray[i] == 0) {",
							"        numberToCreate++;",
							"        console.warn('Entity ' + marketoEntityArray[i] + ' has not been created. Adding to list to be created.');",
							"        schemaListToCreate.push(marketoEntityArray[i]);",
							"    }",
							"}",
							"let numOfMixinsToCreate = 0;",
							"let mixinsListToCreate = [];",
							"checkForMixins(mixinArray, mixinsListToCreate);",
							"//===============================Check What Exists===============================\\\\",
							"",
							"//If there are no more schemas to create, set next request to mixins",
							"if (parseInt(numberToCreate) == 0 && parseInt(numOfMixinsToCreate) != 0) {",
							"    console.log('All Schemas have been created. Setting next request to addin mixins.');",
							"    postman.setNextRequest('Add Mixins');",
							"    if (hasAbm == 'false')",
							"    {",
							"        pm.environment.set('hasRemovedAbmElement', 'true');",
							"    }",
							"}",
							"if (numberToCreate == 0 && numOfMixinsToCreate == 0) {",
							"    console.log('All Schemas and mixins have been created. Setting next request to add identities.');",
							"    postman.setNextRequest('Add Identities');",
							"}",
							"console.log('Number of schemas to be created is ' + numberToCreate);",
							"console.log('Schemas to be created: ' + schemaListToCreate.join());",
							"pm.environment.set('numberToCreate', numberToCreate);",
							"console.log('Number of mixins to add to schemas is ' + numOfMixinsToCreate);",
							"console.log('Mixins to be created: ' + mixinsListToCreate.join());",
							"pm.environment.set('numOfMixinsToCreate', numOfMixinsToCreate);",
							"pm.environment.set('entityMixinArray', entityMixinArray);",
							"pm.environment.set('counter', 0);",
							"pm.environment.set('mixinCounter',0);",
							"pm.environment.set('identityCounter',0);",
							"pm.environment.set('profileCounter',0);",
							"pm.environment.set('relationshipCounter',0);",
							"pm.environment.set('legacyRelationshipCounter',0);",
							"pm.environment.set('secondaryIdentityCounter',0);",
							"pm.environment.set('descriptorRefIdentityCounter',0);",
							"",
							"",
							"//===============================Functions===============================\\\\",
							"function storeIdValues(arrayItem, index) {",
							"    schemaIdArray.splice(index, 1, arrayItem['$id']);",
							"    schemaAltIdArray.splice(index, 1, arrayItem['meta:altId']);",
							"    discoveredEntityArray.splice(index, 1, arrayItem.title);",
							"    console.log('Storing the following at index ' + index + '.\\nDiscovered Entity: ' + arrayItem.title + '\\nSchema Id: ' + arrayItem['$id'] + '\\nSchema Alt Id:' + arrayItem['meta:altId']);",
							"}",
							"",
							"function traverseAllOfArrayForRef(allOfArray, itemToSearchFor) {",
							"    for (let i = 0; i < allOfArray.length; i++) {",
							"        var arrayItem = allOfArray[i];",
							"        if (arrayItem['$ref'] == itemToSearchFor) {",
							"            return arrayItem['$ref'];",
							"        }",
							"    }",
							"    return 0;",
							"}",
							"",
							"function checkForMixins(array, toBeCreatedArray) {",
							"    for (let i = 0; i < array.length; i++) {",
							"        if (array[i] == 0) {",
							"            numOfMixinsToCreate++;",
							"            toBeCreatedArray.push(entityMixinArray[i]);",
							"        }",
							"    }",
							"}",
							"//===============================Functions===============================\\\\"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm+json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/schemas?start=Marketo&orderby=title",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"schemas"
					],
					"query": [
						{
							"key": "start",
							"value": "Marketo"
						},
						{
							"key": "orderby",
							"value": "title"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//get the counter value and array length",
							"let counter = pm.environment.get('counter');",
							"let responseData = JSON.parse(responseBody);",
							"let schemaId = responseData['$id'];",
							"let schemaAltId = responseData['meta:altId'];",
							"let hasAbm = pm.environment.get('has_abm');",
							"",
							"//Grab the scehmaAltId and add it at the index of the array it should be in using the counter minus 1 since we added to the counter in the pre-req script",
							"let schemaAltIdString = pm.environment.get('schemaAltIdArray');",
							"let schemaAltIdArray = schemaAltIdString.toString().split(\",\");",
							"let schemaIdArray = pm.environment.get('schemaIdArray');",
							"",
							"schemaAltIdArray.splice(counter - 1, 1, schemaAltId);",
							"schemaIdArray.splice(counter - 1, 1, schemaId);",
							"pm.environment.set('schemaAltIdArray', schemaAltIdArray);",
							"pm.environment.set('schemaIdArray', schemaIdArray);",
							"",
							"//Number generated before the request so we know how many times we want to loop the create request.",
							"let numberToCreate = parseInt(pm.environment.get('numberToCreate'));",
							"numberToCreate--;",
							"if (0 < numberToCreate)",
							"{",
							"    console.log('The number left to create is ' + numberToCreate);",
							"    pm.environment.set('numberToCreate', numberToCreate);",
							"    // using pm.info.requestName in place of the literal request name. This allows the request name to be changed without a code update.",
							"    postman.setNextRequest(pm.info.requestName);",
							"}",
							"else",
							"{",
							"    console.log('All entity schemas have been created. Moving to Mixins')",
							"    postman.setNextRequest(\"Add Mixins\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let discoveredEntityArray = pm.environment.get('discoveredEntityArray');",
							"let hasRemovedAbmElement = pm.environment.get('hasRemovedAbmElement');",
							"let schemaAltIdString = pm.environment.get('schemaAltIdArray');",
							"let schemaAltIdArray = schemaAltIdString.toString().split(\",\");",
							"let schemaIdArray = pm.environment.get('schemaIdArray');",
							"let munchkinId = pm.environment.get('munchkinId');",
							"",
							"//We need to set an array of variables that we want to make sure are created.",
							"if(pm.environment.get('has_abm') == \"false\"){",
							"    pm.environment.set('marketoEntityArray', '[\"Marketo Company \",\"Marketo Person \",\"Marketo Opportunity \",\"Marketo Opportunity Contact Role \",\"Marketo Program \",\"Marketo Program Member \",\"Marketo Static List \",\"Marketo Static List Member \",\"Marketo Activity \"]');",
							"    pm.environment.set('classIdArray','[\"https://ns.adobe.com/xdm/context/account\",\"https://ns.adobe.com/xdm/context/profile\",\"https://ns.adobe.com/xdm/context/opportunity\",\"https://ns.adobe.com/xdm/classes/opportunity-person\",\"https://ns.adobe.com/xdm/classes/campaign\",\"https://ns.adobe.com/xdm/context/campaign-member\",\"https://ns.adobe.com/xdm/classes/marketing-list\",\"https://ns.adobe.com/xdm/classes/marketing-list-member\",\"https://ns.adobe.com/xdm/context/experienceevent\"]');",
							"    if (hasRemovedAbmElement == 'false')",
							"    {",
							"        discoveredEntityArray.splice(1, 1);",
							"        schemaAltIdArray.splice(1,1);",
							"        schemaIdArray.splice(1,1);",
							"        pm.environment.set('discoveredEntityArray', discoveredEntityArray);",
							"        pm.environment.set('schemaAltIdArray', schemaAltIdArray);",
							"        pm.environment.set('schemaIdArray', schemaIdArray);",
							"        pm.environment.set('hasRemovedAbmElement', 'true');",
							"    }",
							"} else {",
							"    pm.environment.set('marketoEntityArray', '[\"Marketo Company \",\"Marketo Named Account \",\"Marketo Person \",\"Marketo Opportunity \",\"Marketo Opportunity Contact Role \",\"Marketo Program \",\"Marketo Program Member \",\"Marketo Static List \",\"Marketo Static List Member \",\"Marketo Activity \"]');",
							"    pm.environment.set('classIdArray','[\"https://ns.adobe.com/xdm/context/account\",\"https://ns.adobe.com/xdm/context/account\",\"https://ns.adobe.com/xdm/context/profile\",\"https://ns.adobe.com/xdm/context/opportunity\",\"https://ns.adobe.com/xdm/classes/opportunity-person\",\"https://ns.adobe.com/xdm/classes/campaign\",\"https://ns.adobe.com/xdm/context/campaign-member\",\"https://ns.adobe.com/xdm/classes/marketing-list\",\"https://ns.adobe.com/xdm/classes/marketing-list-member\",\"https://ns.adobe.com/xdm/context/experienceevent\"]');",
							"}",
							"if(!pm.environment.has('counter'))",
							"{",
							"    pm.environment.set('counter',0);",
							"}",
							"",
							"let marketoEntityArray = JSON.parse(pm.environment.get('marketoEntityArray'));",
							"",
							"//if the environment has been run before we want to reset the counter back to zero so we can rerun it. ",
							"if(pm.environment.get('counter') >= marketoEntityArray.length)",
							"{",
							"    console.log('Entities have been run before, starting over.');",
							"    pm.environment.set('counter', 0);",
							"}",
							"",
							"",
							"//get the counter value",
							"let counter = pm.environment.get('counter');",
							"",
							"let classIdArray = JSON.parse(pm.environment.get('classIdArray'));",
							"console.log('class id array: ' + classIdArray);",
							"",
							"//Check to see if the entity was already created, if so skip this index and move to the next",
							"let discoveredEntity = discoveredEntityArray[counter]",
							"if (discoveredEntity != 0) {",
							"    while(discoveredEntity != 0) {",
							"        counter++",
							"        console.log('The entity ' + discoveredEntity + ' was already created, skipping to the next.')",
							"        discoveredEntity = discoveredEntityArray[counter];",
							"    }",
							"}",
							"",
							"//get the value of the idArray at the current iteration (counter)",
							"let schemaName = marketoEntityArray[counter] + munchkinId;",
							"console.log('schema name: ' + schemaName);",
							"let classId = classIdArray[counter];",
							"console.log('class id: ' + classId);",
							"",
							"//swap out values for new request post with obtained values in array",
							"pm.environment.set('schemaName', schemaName);",
							"pm.environment.set('classId', classId);",
							"",
							"//incremement the counter, and store it in the environment",
							"counter++;",
							"pm.environment.set('counter',counter);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"type\": \"object\",\n  \"title\": \"{{schemaName}}\",\n  \"description\": \"\",\n  \"allOf\": [\n    {\n      \"$ref\": \"{{classId}}\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/schemas",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"schemas"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Mixins",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.warn('pre-request script called for mixins');",
							"",
							"let mixinIdArray = JSON.parse(pm.environment.get('mixinIdArray'));",
							"let schemaAltIdString = pm.environment.get('schemaAltIdArray');",
							"let schemaAltIdArray = schemaAltIdString.toString().split(\",\");",
							"let mixinString = pm.environment.get('mixinArray');",
							"let mixinArray = mixinString.toString().split(\",\");",
							"let hasMsi = pm.environment.get('has_msi');",
							"let mixinCounter = parseInt(pm.environment.get('mixinCounter'));",
							"let hasRemovedAbmElement = pm.environment.get('hasRemovedAbmElement');",
							"console.log('schemaAltIdArray in pre-request for mixins: ' + schemaAltIdArray.join());",
							"console.log('mixinIdArray in pre-request for mixins: ' + mixinIdArray.join());",
							"console.log('mixinArray in pre-request for mixins: ' + mixinArray.join());",
							"console.log('hasMsi in pre-request for mixins: ' + hasMsi);",
							"",
							"if(hasRemovedAbmElement == 'true')",
							"{",
							"    //insert the 1 for abm again since it was removed for schema creation",
							"    schemaAltIdArray.splice(1,0,1);",
							"    pm.environment.set('schemaAltIdArray', schemaAltIdArray);",
							"    pm.environment.set('hasRemovedAbmElement', false);",
							"}",
							"",
							"if(mixinCounter == 0)",
							"{",
							"    console.log('mixin counter is zero');",
							"    for(let i = 0; i < mixinArray.length; i++)",
							"    {",
							"        console.log('Forloop interation: ' + i);",
							"        console.log('mixin array at index: ' + mixinArray[i]);",
							"        if(mixinArray[i] == 0)",
							"        {",
							"            switch(i)",
							"            {",
							"                case 0:",
							"                case 1:",
							"                case 2:",
							"                case 5:",
							"                case 6:",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[i]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[i]);",
							"                    break;",
							"                case 3:",
							"                case 4:",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[i - 1]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[i - 1]);",
							"                    break;",
							"                case 7:",
							"                case 8:",
							"                case 9:",
							"                case 10:",
							"                case 11:",
							"                case 12:",
							"                case 13:",
							"                case 14:",
							"                case 15:",
							"                case 16:",
							"                case 17:",
							"                case 18:",
							"                case 19:",
							"                case 20:",
							"                case 21:",
							"                case 22:",
							"                case 23:",
							"                case 24:",
							"                case 25:",
							"                case 26:",
							"                case 27:",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[9]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[9]);",
							"                    break;",
							"                case 28:",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[2]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[2]);",
							"                    break;",
							"            }",
							"            if(hasMsi == 'false' && i == 16)",
							"            {",
							"                mixinArray.splice(16,1,1);",
							"                pm.environment.set('mixinArray', mixinArray);",
							"                continue;",
							"            } else {",
							"                console.log('Setting mixin to be added: ' + mixinIdArray[i]);",
							"                pm.environment.set('mixinId', mixinIdArray[i]);",
							"                pm.environment.set('mixinIndex', i);",
							"                break;",
							"            }",
							"        }",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.warn('test script called for mixins');",
							"",
							"var responseData = JSON.parse(responseBody);",
							"let mixinString = pm.environment.get('mixinArray');",
							"let mixinArray = mixinString.toString().split(\",\");",
							"let schemaAltIdString = pm.environment.get('schemaAltIdArray');",
							"let schemaAltIdArray = schemaAltIdString.toString().split(\",\");",
							"let mixinIndex = pm.environment.get('mixinIndex');",
							"let mixinIdArray = JSON.parse(pm.environment.get('mixinIdArray'));",
							"let hasMsi = pm.environment.get('has_msi');",
							"pm.environment.set('mixinCounter', 1);",
							"",
							"//If we have a response with data, save what we added to the mixinArray so we don't repeat later",
							"if(responseData.allOf)",
							"{",
							"    mixinArray.splice(mixinIndex, 1, traverseAllOfArrayForRef(responseData.allOf, mixinIdArray[mixinIndex]));",
							"    console.log('Mixin ' + mixinArray[mixinIndex] + ' successfully added to array:\\n' + mixinArray.join());",
							"    console.log('schemaAltIdArray: ' + schemaAltIdArray.join());",
							"    pm.environment.set('mixinArray', mixinArray);",
							"}",
							"",
							"let areMixinsAllCreated = checkIfMixinsAreCreated(mixinArray);",
							"",
							"if (!areMixinsAllCreated)",
							"{",
							"    for(let i = 0; i < mixinArray.length; i++)",
							"    {",
							"        if(mixinArray[i] == 0)",
							"        {",
							"            switch(i)",
							"            {",
							"                case 0:",
							"                case 1:",
							"                case 2:",
							"                case 5:",
							"                case 6:",
							"                    console.warn('Case 0,1,2,5,6 has been hit with index ' + i);",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[i]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[i]);",
							"                    break;",
							"                case 3:",
							"                case 4:",
							"                    console.warn('Case 3,4 has been hit with index ' + i);",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[i - 1]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[i - 1]);",
							"                    break;",
							"                case 7:",
							"                case 8:",
							"                case 9:",
							"                case 10:",
							"                case 11:",
							"                case 12:",
							"                case 13:",
							"                case 14:",
							"                case 15:",
							"                case 16:",
							"                case 17:",
							"                case 18:",
							"                case 19:",
							"                case 20:",
							"                case 21:",
							"                case 22:",
							"                case 23:",
							"                case 24:",
							"                case 25:",
							"                case 26:",
							"                case 27:",
							"                    console.warn('Case 7 - 27 has been hit with index ' + i);",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[9]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[9]);",
							"                    break;",
							"                case 28:",
							"                    console.log('Setting schema to be added: ' + schemaAltIdArray[2]);",
							"                    pm.environment.set('schemaAltId', schemaAltIdArray[2]);",
							"                    break;",
							"            }",
							"            if(hasMsi == 'false' && i == 16)",
							"            {",
							"                mixinArray.splice(16,1,1);",
							"                pm.environment.set('mixinArray', mixinArray);",
							"                continue;",
							"            } else {",
							"                console.log('Setting mixin to be added: ' + mixinIdArray[i]);",
							"                pm.environment.set('mixinId', mixinIdArray[i]);",
							"                pm.environment.set('mixinIndex', i);",
							"                postman.setNextRequest(pm.info.requestName);",
							"                break;",
							"            }",
							"        }",
							"    }",
							"} else {",
							"    console.log('All mixins are created. Moving to adding identities');",
							"    postman.setNextRequest('Add Identities');",
							"}",
							"",
							"//===============================Functions===============================\\\\",
							"",
							"function checkIfMixinsAreCreated (arrayToCheck)",
							"{",
							"    console.log('checking if all mixins are created or not.')",
							"    for(let i = 0; i < arrayToCheck.length; i++) ",
							"    {",
							"        if(arrayToCheck[i] == 0)",
							"        {",
							"            console.warn('Found a mixin that needs to be created, returning false');",
							"            return false;",
							"        }",
							"    }",
							"    console.log('all mixins have been checked and are created. Returning true.')",
							"    return true;",
							"}",
							"",
							"function traverseAllOfArrayForRef(allOfArray, itemToSearchFor) {",
							"    for (let i = 0; i < allOfArray.length; i++) {",
							"        var arrayItem = allOfArray[i];",
							"        if (arrayItem['$ref'] == itemToSearchFor) {",
							"            return arrayItem['$ref'];",
							"        }",
							"    }",
							"    return 0;",
							"}",
							"//===============================Functions===============================\\\\"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm+json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n  \"op\": \"add\",\n  \"path\": \"/allOf/-\",\n  \"value\": {\n    \"$ref\": \"{{mixinId}}\"\n  }\n}]"
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/schemas/{{schemaAltId}}",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"schemas",
						"{{schemaAltId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Identities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.warn('pre-request script called for identities');",
							"",
							"let schemasToAddIdentitiesTo = [];",
							"let secondaryIdentityString = \"\";",
							"let secondaryIdentityArray = [];",
							"let hasSecondary = pm.environment.get('hasSecondary');",
							"let primaryIdentityString = pm.environment.get('namespaceArray');",
							"let primaryIdentityArray = primaryIdentityString.toString().split(\",\");",
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let sourcePropertyArray = JSON.parse(pm.environment.get('sourcePropertyArray'));",
							"let identityCounter = pm.environment.get('identityCounter');",
							"let hasAbm = pm.environment.get('has_abm');",
							"",
							"console.log('starting values:' + '\\nhasSecondary: ' + hasSecondary + '\\nprimaryIdentityArray: ' + primaryIdentityArray + '\\nschemaIdArray: ' + schemaIdArray + '\\nsourcePropertyArray: ' + sourcePropertyArray + '\\nidentityCounter: ' + identityCounter + '\\nhasAbm' + hasAbm);",
							"",
							"if(identityCounter == 0)",
							"{",
							"    schemasToAddIdentitiesTo.push.apply(schemasToAddIdentitiesTo, schemaIdArray);",
							"    console.log('schemasToAddIdentitiesTo: ' + schemasToAddIdentitiesTo.join() + '\\nhasSecondary: ' + hasSecondary + '\\nidentityCounter: ' + identityCounter);",
							"}",
							"",
							"if(hasSecondary == \"true\" && identityCounter == 0)",
							"{",
							"    secondaryIdentityString = pm.environment.get('secondaryNamespaceArray');",
							"    secondaryIdentityArray = secondaryIdentityString.toString().split(\",\");",
							"    schemasToAddIdentitiesTo.push.apply(schemasToAddIdentitiesTo, [schemaIdArray[0],schemaIdArray[1],schemaIdArray[2],schemaIdArray[3],schemaIdArray[4],schemaIdArray[5]]);",
							"    console.log('hasSecondary is true. New schemas list to add to is: ' + schemasToAddIdentitiesTo.join());",
							"    primaryIdentityArray.push.apply(primaryIdentityArray,secondaryIdentityArray);",
							"    console.log('secondary identity array exists, adding secondarys: ' + secondaryIdentityArray + '\\nto the primary array: ' + primaryIdentityArray);",
							"    pm.environment.set('identityArray',primaryIdentityArray);",
							"    pm.environment.set('schemasToAddIdentitiesTo',schemasToAddIdentitiesTo);",
							"}",
							"let identityString = pm.environment.get('identityArray');",
							"let identityArray = identityString.toString().split(\",\");",
							"",
							"if(hasAbm == 'true' && identityCounter == 0 && hasSecondary == 'true')",
							"{",
							"    identityArray.splice(11, 0 , identityArray[10]);",
							"    pm.environment.set('identityArray', identityArray);",
							"    console.log('identity array updated for abm secondary: ' + identityArray);",
							"}",
							"",
							"if(hasAbm == 'false' && identityCounter == 0)",
							"{",
							"    schemasToAddIdentitiesTo.splice(1,0,1);",
							"    pm.environment.set('schemasToAddIdentitiesTo', schemasToAddIdentitiesTo);",
							"    console.log('schemasToAddIdentitiesTo has been updated for no abm, new array is: ' + schemasToAddIdentitiesTo);",
							"}",
							"",
							"if(identityCounter == 0)",
							"{",
							"    setupIdentitiesToAdd(0, true, schemasToAddIdentitiesTo, sourcePropertyArray, identityArray);",
							"}",
							"identityCounter++;",
							"console.log('identityCounter after increment in pre-request: ' + identityCounter);",
							"pm.environment.set('identityCounter', identityCounter);",
							"",
							"//===============================Functions===============================\\\\",
							"function setupIdentitiesToAdd(index, isPrimary, schemasArray, propertyArray, identityNamespaceArray)",
							"{",
							"    console.log('Setting Identity');",
							"    pm.environment.set('schemaId', schemasArray[index]);",
							"    pm.environment.set('sourceProperty', propertyArray[index]);",
							"    pm.environment.set('namespace', identityNamespaceArray[index]);",
							"    pm.environment.set('isPrimary', isPrimary);",
							"}",
							"//===============================Functions===============================\\\\"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.warn('test script of Add Identities called.')",
							"var responseData = JSON.parse(responseBody);",
							"let schemasToAddIdentitiesToString = pm.environment.get('schemasToAddIdentitiesTo');",
							"let schemasToAddIdentitiesTo = schemasToAddIdentitiesToString.toString().split(\",\");",
							"let identityString = pm.environment.get('identityArray');",
							"let identityArray = identityString.toString().split(\",\");",
							"let identityCounter = pm.environment.get('identityCounter');",
							"let sourcePropertyArray = JSON.parse(pm.environment.get('sourcePropertyArray'));",
							"let hasAbm = pm.environment.get('has_abm');",
							"",
							"//If we have a response with data, save what we added to the mixinArray so we don't repeat later",
							"if(responseData['@id'])",
							"{",
							"    identityArray.splice(identityCounter - 1, 1, responseData['@id']);",
							"    console.log('Identity ' + identityArray[identityCounter - 1] + ' successfully added to array:\\n' + identityArray.join());",
							"}",
							"if(parseInt(responseData.status) == 400)",
							"{",
							"    let report = responseData.report;",
							"    console.warn('Error with response:\\n' + report['detailed-message']);",
							"}",
							"",
							"if (identityCounter < identityArray.length)",
							"{",
							"    console.log( 'identityCounter: ' + identityCounter + '\\nidentity array at index: ' + identityArray[identityCounter]);",
							"    switch(identityCounter)",
							"    {",
							"        case 0:",
							"            setupIdentitiesToAdd(identityCounter, true);",
							"            break;",
							"        case 1:",
							"            if(hasAbm == 'true')",
							"            {",
							"                setupIdentitiesToAdd(identityCounter, true);",
							"                break;",
							"            }",
							"            identityCounter++;",
							"            console.log('identityCounter after increment in test script: ' + identityCounter);",
							"            pm.environment.set(identityCounter);",
							"        case 2:",
							"            setupIdentitiesToAdd(identityCounter, true);",
							"            break;",
							"        case 3:",
							"        case 4:",
							"        case 5:",
							"        case 6:",
							"        case 7:",
							"        case 8:",
							"        case 9:",
							"            setupIdentitiesToAdd(identityCounter, true);",
							"            break;",
							"        case 10:",
							"        case 11:",
							"        case 12:",
							"        case 13:",
							"        case 14:",
							"            console.log('Setting Identity');",
							"            pm.environment.set('schemaId', schemasToAddIdentitiesTo[identityCounter]);",
							"            pm.environment.set('sourceProperty', sourcePropertyArray[10]);",
							"            pm.environment.set('namespace', identityArray[identityCounter]);",
							"            pm.environment.set('isPrimary', false);",
							"            break;",
							"        case 15:",
							"            if(hasAbm == 'true')",
							"            {",
							"                console.log('Setting Identity');",
							"                pm.environment.set('schemaId', schemasToAddIdentitiesTo[identityCounter]);",
							"                pm.environment.set('sourceProperty', sourcePropertyArray[10]);",
							"                pm.environment.set('namespace', identityArray[identityCounter]);",
							"                pm.environment.set('isPrimary', false);",
							"                break;",
							"            }",
							"            identityCounter++;",
							"            pm.environment.set('identityCounter', identityCounter);",
							"        case 16:",
							"            identityCounter++;",
							"            pm.environment.set('identityCounter', identityCounter);",
							"            break;",
							"    }",
							"    postman.setNextRequest(pm.info.requestName);",
							"} else {",
							"    console.log('All identities are created. Moving to adding relationships');",
							"    postman.setNextRequest('Add Relationships');",
							"}",
							"",
							"//===============================Functions===============================\\\\",
							"function setupIdentitiesToAdd(index, isPrimary)",
							"{",
							"    console.log('identityCounter at setup: ' + index + '\\nSetting Identity request info\\nSchemaId: ' + schemasToAddIdentitiesTo[index] + '\\nSource Property: ' + sourcePropertyArray[index] + '\\nnamespace: ' + identityArray[index] + '\\nisPrimary: ' + isPrimary);",
							"    pm.environment.set('schemaId', schemasToAddIdentitiesTo[index]);",
							"    pm.environment.set('sourceProperty', sourcePropertyArray[index]);",
							"    pm.environment.set('namespace', identityArray[index]);",
							"    pm.environment.set('isPrimary', isPrimary);",
							"}",
							"//===============================Functions===============================\\\\"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm-id+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"@type\": \"xdm:descriptorIdentity\",\n   \"xdm:sourceSchema\" : \"{{schemaId}}\",\n   \"xdm:sourceVersion\" : 1,\n   \"xdm:sourceProperty\" : \"{{sourceProperty}}\",\n   \"xdm:namespace\" : \"{{namespace}}\",\n   \"xdm:property\" : \"xdm:code\",\n   \"xdm:isPrimary\": {{isPrimary}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/descriptors",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"descriptors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Relationships",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.warn('pre-request script called for relationships');",
							"pm.environment.set('marketoEntityArray', '[\"Company\",\"Account\",\"People\",\"Opportunities\",\"Opportunity\",\"Programs\",\"Program\",\"Lists\",\"List\",\"Activity\",\"Parent\",\"Child\",\"Person\"]');",
							"let abmIndex = 0;",
							"let primaryIdentityString = pm.environment.get('namespaceArray');",
							"let primaryIdentityArray = primaryIdentityString.toString().split(\",\");",
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let relationshipSourcePropertyArray = JSON.parse(pm.environment.get('relationshipSourcePropertyArray'));",
							"let relationshipDestinationPropertyArray = JSON.parse(pm.environment.get('relationshipDestinationPropertyArray'));",
							"let relationshipCounter = parseInt(pm.environment.get('relationshipCounter'));",
							"let marketoEntityArray = JSON.parse(pm.environment.get('marketoEntityArray'));",
							"let relationshipSchemaString = pm.environment.get('relationshipSchemaArray');",
							"let relationshipSchemaArray = relationshipSchemaString.toString().split(\",\");",
							"let hasAbm = pm.environment.get('has_abm');",
							"let relationshipIndex = pm.environment.get('relationshipIndex');",
							"",
							"//set index for ABM as there are a few calls to use it",
							"if (hasAbm == 'true')",
							"{",
							"    abmIndex = 1;",
							"}",
							"pm.environment.set('abmIndex', abmIndex);",
							"",
							"if(abmIndex == 0 && relationshipCounter == 0)",
							"{",
							"    primaryIdentityArray.splice(1,0,1);",
							"    schemaIdArray.splice(1,0,1);",
							"    relationshipSchemaArray.splice(1,0,1);",
							"    pm.environment.set('primaryIdentityArray',primaryIdentityArray);",
							"    pm.environment.set('schemaIdArray',schemaIdArray);",
							"    pm.environment.set('relationshipSchemaArray', relationshipSchemaArray);",
							"    console.log('abmIndex is: ' + abmIndex + ' and relationshipCounter is: ' + relationshipCounter + '\\nSplicing primaryIdentityArray: ' + primaryIdentityArray.join() + '\\,Splicing schemaIdArray: ' + schemaIdArray.join() + '\\nSplicing relationshipSchemaArray: ' + relationshipSchemaArray.join());",
							"}",
							"",
							"if(relationshipCounter == 0)",
							"{",
							"    console.log('relationship counter is zero');",
							"    for(let i = 0; i < relationshipSchemaArray.length; i++)",
							"    {",
							"        console.log('For loop interation: ' + i);",
							"        console.log('relationshipSchemaArray at index: ' + relationshipSchemaArray[i]);",
							"        if(relationshipSchemaArray[i] == 0)",
							"        {",
							"            switch(i)",
							"            {",
							"                case 0:",
							"                    relationshipSchemaArray.splice(0,1,1);",
							"                    pm.environment.set('relationshipSchemaArray', relationshipSchemaArray);",
							"                    i++;",
							"                    console.log('i after increment in case 0: ' + i);",
							"                case 1:",
							"                    relationshipSchemaArray.splice(1,1,1);",
							"                    pm.environment.set('relationshipSchemaArray', relationshipSchemaArray);",
							"                    i++;",
							"                    console.log('i after increment in case 1: ' + i);",
							"                case 2:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[2] + '\\ndestinationSchema: ' + schemaIdArray[abmIndex] + '\\ndestinationNamespace: ' + primaryIdentityArray[abmIndex] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[abmIndex] + '\\nsourceToDestinationTitle:' + marketoEntityArray[2]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[0]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[0]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[1]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[0]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[0]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 3:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[3] + '\\ndestinationSchema: ' + schemaIdArray[abmIndex] + '\\ndestinationNamespace: ' + primaryIdentityArray[abmIndex] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[abmIndex] + '\\nsourceToDestinationTitle:' + marketoEntityArray[3]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[3]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[0]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[0]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[3]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[1]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[1]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[1]);",
							"                    break;",
							"                case 4:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[4] + '\\ndestinationSchema: ' + schemaIdArray[2] + '\\ndestinationNamespace: ' + primaryIdentityArray[2] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[2] + '\\nsourceToDestinationTitle:' + marketoEntityArray[4]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[4]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[2]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[3]);",
							"                    pm.environment.set('sourceToDestinationTitle', 'Person');",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[2]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[2]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 5:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[4] + '\\ndestinationSchema: ' + schemaIdArray[3] + '\\ndestinationNamespace: ' + primaryIdentityArray[3] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[3] + '\\nsourceToDestinationTitle:' + marketoEntityArray[4]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[4]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[3]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[3]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[4]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[3]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[3]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 6:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[i] + '\\ndestinationSchema: ' + schemaIdArray[2] + '\\ndestinationNamespace: ' + primaryIdentityArray[2] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[2] + '\\nsourceToDestinationTitle:' + marketoEntityArray[i]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[i]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[2]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[5]);",
							"                    pm.environment.set('sourceToDestinationTitle', 'Person');",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[4]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[4]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 7:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[6] + '\\ndestinationSchema: ' + schemaIdArray[5] + '\\ndestinationNamespace: ' + primaryIdentityArray[5] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[5] + '\\nsourceToDestinationTitle:' + marketoEntityArray[6]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[6]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[5]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[5]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[6]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[5]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[5]);",
							"                    break;",
							"                case 8:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[i] + '\\ndestinationSchema: ' + schemaIdArray[2] + '\\ndestinationNamespace: ' + primaryIdentityArray[2] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[2] + '\\nsourceToDestinationTitle:' + marketoEntityArray[i]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[i]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[2]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[7]);",
							"                    pm.environment.set('sourceToDestinationTitle', 'Person');",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[6]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[6]);",
							"                    break;",
							"                case 9:",
							"                    console.log('Setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[8] + '\\ndestinationSchema: ' + schemaIdArray[7] + '\\ndestinationNamespace: ' + primaryIdentityArray[7] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[7] + '\\nsourceToDestinationTitle:' + marketoEntityArray[8]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[8]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[7]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[7]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[8]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[7]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[7]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"            }",
							"            pm.environment.set('relationshipIndex', i);",
							"            break;",
							"        }",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.warn('Test script called for relationships');",
							"",
							"let responseData = JSON.parse(responseBody);",
							"let abmIndex = 0;",
							"let primaryIdentityString = pm.environment.get('namespaceArray');",
							"let primaryIdentityArray = primaryIdentityString.toString().split(\",\");",
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let relationshipSourcePropertyArray = JSON.parse(pm.environment.get('relationshipSourcePropertyArray'));",
							"let relationshipDestinationPropertyArray = JSON.parse(pm.environment.get('relationshipDestinationPropertyArray'));",
							"let marketoEntityArray = JSON.parse(pm.environment.get('marketoEntityArray'));",
							"let relationshipSchemaString = pm.environment.get('relationshipSchemaArray');",
							"let relationshipSchemaArray = relationshipSchemaString.toString().split(\",\");",
							"let hasAbm = pm.environment.get('has_abm');",
							"let relationshipIndex = pm.environment.get('relationshipIndex');",
							"pm.environment.set('relationshipCounter', 1);",
							"",
							"if(parseInt(responseData.status) == 400)",
							"{",
							"    let report = responseData.report;",
							"    console.warn('Error with response:\\n' + report['detailed-message']);",
							"    relationshipSchemaArray.splice(relationshipIndex, 1, report['detailed-message']);",
							"    pm.environment.set('relationshipSchemaArray', relationshipSchemaArray);",
							"}",
							"",
							"//If we have a response with data, save what we added to the mixinArray so we don't repeat later",
							"if(responseData['@id'])",
							"{",
							"    relationshipSchemaArray.splice(relationshipIndex, 1, responseData['@id']);",
							"    console.log('relationship ' + relationshipSchemaArray[relationshipIndex] + ' successfully added to array:\\n' + relationshipSchemaArray.join());",
							"    pm.environment.set('relationshipSchemaArray', relationshipSchemaArray);",
							"}",
							"",
							"//set index for ABM as there are a few calls to use it",
							"if (hasAbm == 'true')",
							"{",
							"    abmIndex = 1;",
							"}",
							"pm.environment.set('abmIndex', abmIndex);",
							"",
							"//Check to see if all array elements exist yet or if we need to create more",
							"console.log('relationshipSchemaArray before check:\\n' + relationshipSchemaArray.join());",
							"let areRelationshipsCreated = checkIfRelationshipsAreCreated(relationshipSchemaArray);",
							"",
							"if(!areRelationshipsCreated)",
							"{",
							"    while(relationshipIndex < relationshipSchemaArray.length)",
							"    {",
							"        console.log('while loop hit, relationshipIndex is: ' + relationshipIndex + '\\nrelationshipSchemaArray at index: ' + relationshipSchemaArray[relationshipIndex]);",
							"        if(relationshipSchemaArray[relationshipIndex] == 0)",
							"        {",
							"            switch(relationshipIndex)",
							"            {",
							"                case 0:",
							"                    relationshipIndex++;",
							"                    console.log('relationshipIndex after increment in case 0: ' + relationshipIndex);",
							"                case 1:",
							"                    relationshipIndex++;",
							"                    console.log('relationshipIndex after increment in case 1: ' + relationshipIndex);",
							"                case 2:",
							"                    console.log('Case 2 setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[2] + '\\ndestinationSchema: ' + schemaIdArray[abmIndex] + '\\ndestinationNamespace: ' + primaryIdentityArray[abmIndex] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[2] + '\\nsourceToDestinationTitle:' + marketoEntityArray[abmIndex]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[0]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[0]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[1]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[0]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[0]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 3:",
							"                    console.log('Case 3 setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[3] + '\\ndestinationSchema: ' + schemaIdArray[abmIndex] + '\\ndestinationNamespace: ' + primaryIdentityArray[abmIndex] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[3] + '\\nsourceToDestinationTitle:' + marketoEntityArray[abmIndex]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[3]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[0]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[0]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[3]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[1]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[1]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[1]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 4:",
							"                    console.log('Case 4 setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[relationshipIndex] + '\\ndestinationSchema: ' + schemaIdArray[2] + '\\ndestinationNamespace: ' + primaryIdentityArray[2] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[relationshipIndex] + '\\nsourceToDestinationTitle:' + marketoEntityArray[2]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[relationshipIndex]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[2]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[3]);",
							"                    pm.environment.set('sourceToDestinationTitle', 'Person');",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[2]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[2]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 5:",
							"                    console.log('Case 5 setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[4] + '\\ndestinationSchema: ' + schemaIdArray[3] + '\\ndestinationNamespace: ' + primaryIdentityArray[3] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[4] + '\\nsourceToDestinationTitle:' + marketoEntityArray[3]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[4]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[3]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[3]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[4]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[3]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[3]);",
							"                    break;",
							"                case 6:",
							"                    console.log('Case 6 setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[relationshipIndex] + '\\ndestinationSchema: ' + schemaIdArray[2] + '\\ndestinationNamespace: ' + primaryIdentityArray[2] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[relationshipIndex] + '\\nsourceToDestinationTitle:' + marketoEntityArray[2]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[relationshipIndex]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[2]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[5]);",
							"                    pm.environment.set('sourceToDestinationTitle', 'Person');",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[4]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[4]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 7:",
							"                    console.log('Case 7 setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[6] + '\\ndestinationSchema: ' + schemaIdArray[5] + '\\ndestinationNamespace: ' + primaryIdentityArray[5] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[6] + '\\nsourceToDestinationTitle:' + marketoEntityArray[5]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[6]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[5]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[5]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[6]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[5]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[5]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 8:",
							"                    console.log('Case 8 settingetting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[relationshipIndex] + '\\ndestinationSchema: ' + schemaIdArray[2] + '\\ndestinationNamespace: ' + primaryIdentityArray[2] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[relationshipIndex] + '\\nsourceToDestinationTitle:' + marketoEntityArray[2]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[relationshipIndex]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[2]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[2]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[7]);",
							"                    pm.environment.set('sourceToDestinationTitle', 'Person');",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[6]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[6]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"                case 9:",
							"                    console.log('Case 9 setting relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[8] + '\\ndestinationSchema: ' + schemaIdArray[7] + '\\ndestinationNamespace: ' + primaryIdentityArray[7] + '\\ndestinationToSouceTitle: ' + marketoEntityArray[8] + '\\nsourceToDestinationTitle:' + marketoEntityArray[7]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[8]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[7]);",
							"                    pm.environment.set('destinationNamespace', primaryIdentityArray[7]);",
							"                    pm.environment.set('destinationToSouceTitle', marketoEntityArray[2]);",
							"                    pm.environment.set('sourceToDestinationTitle', marketoEntityArray[8]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[7]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[7]);",
							"                    pm.environment.set('cardinality',\"M:1\");",
							"                    break;",
							"            }",
							"            pm.environment.set('relationshipIndex', relationshipIndex);",
							"            relationshipIndex++;",
							"            break;",
							"        }",
							"        relationshipIndex++;",
							"    }",
							"    postman.setNextRequest(pm.info.requestName);",
							"} else {",
							"    console.log('All relationships are created. Moving to secondary identities.');",
							"    postman.setNextRequest('Add Secondary Identities');",
							"}",
							"",
							"//===============================Functions===============================\\\\",
							"function checkIfRelationshipsAreCreated (arrayToCheck)",
							"{",
							"    console.log('checking if all relationships are created or not.')",
							"    for(let i = 0; i < arrayToCheck.length; i++) ",
							"    {",
							"        console.log('for loop index inside check: ' + i);",
							"        console.log('array to check at index: ' + arrayToCheck[i]);",
							"        if(arrayToCheck[i] == 0)",
							"        {",
							"            console.warn('Found a relationship that needs to be created, returning false');",
							"            return false;",
							"        }",
							"    }",
							"    console.log('all relationships have been checked and are created. Returning true.')",
							"    return true;",
							"}",
							"//===============================Functions===============================\\\\"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm-id+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"@type\": \"xdm:descriptorRelationship\",\n   \"xdm:sourceSchema\" : \"{{sourceSchema}}\",\n   \"xdm:sourceVersion\" : 1,\n   \"xdm:sourceProperty\" : \"{{sourceProperty}}\",\n   \"xdm:destinationSchema\" : \"{{destinationSchema}}\",\n   \"xdm:destinationVersion\" : 1,\n   \"xdm:destinationProperty\": \"{{destinationProperty}}\",\n   \"xdm:destinationNamespace\" : \"{{destinationNamespace}}\",\n   \"xdm:destinationToSourceTitle\" : \"{{destinationToSouceTitle}}\",\n   \"xdm:sourceToDestinationTitle\" : \"{{sourceToDestinationTitle}}\",\n   \"xdm:cardinality\": \"{{cardinality}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/descriptors",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"descriptors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Secondary Identities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let secondaryIdentityCounter = pm.environment.get('secondaryIdentityCounter');",
							"",
							"pm.environment.set('schemaId', schemaIdArray[2]);",
							"",
							"if(secondaryIdentityCounter == 0)",
							"{",
							"    pm.environment.set('sourceProperty', '/workEmail/address');",
							"    pm.environment.set('namespace', 'Email')",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let secondaryIdentityCounter = pm.environment.get('secondaryIdentityCounter');",
							"secondaryIdentityCounter++;",
							"",
							"if(secondaryIdentityCounter == 1)",
							"{",
							"    pm.environment.set('schemaId', schemaIdArray[2]);",
							"    pm.environment.set('sourceProperty', '/identityMap');",
							"    pm.environment.set('namespace', 'ECID');",
							"    pm.environment.set('secondaryIdentityCounter',secondaryIdentityCounter);",
							"    postman.setNextRequest(pm.info.requestName);",
							"} else {",
							"    console.log('All secondary identities are created. Moving to adding Descriptor Reference Identities.');",
							"    postman.setNextRequest('Add Descriptor Reference Identity');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm-id+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"@type\": \"xdm:descriptorIdentity\",\n   \"xdm:sourceSchema\" : \"{{schemaId}}\",\n   \"xdm:sourceVersion\" : 1,\n   \"xdm:sourceProperty\" : \"{{sourceProperty}}\",\n   \"xdm:namespace\" : \"{{namespace}}\",\n   \"xdm:property\" : \"xdm:code\",\n   \"xdm:isPrimary\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/descriptors",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"descriptors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Descriptor Reference Identity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.warn('pre-request script called for descriptor reference identity');",
							"",
							"let abmIndex = 0;",
							"let primaryIdentityString = pm.environment.get('namespaceArray');",
							"let primaryIdentityArray = primaryIdentityString.toString().split(\",\");",
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let relationshipSourcePropertyArray = JSON.parse(pm.environment.get('relationshipSourcePropertyArray'));",
							"let descriptorRefIdentityCounter = parseInt(pm.environment.get('descriptorRefIdentityCounter'));",
							"let descriptorRefIdentityString = pm.environment.get('descriptorRefIdentityArray');",
							"let descriptorRefIdentityArray = descriptorRefIdentityString.toString().split(\",\");",
							"let hasAbm = pm.environment.get('has_abm');",
							"let relationshipIndex = pm.environment.get('relationshipIndex');",
							"",
							"",
							"//set index for ABM as there are a few calls to use it",
							"if (hasAbm == 'true')",
							"{",
							"    abmIndex = 1;",
							"}",
							"",
							"if(abmIndex == 0 && descriptorRefIdentityCounter == 0)",
							"{",
							"    descriptorRefIdentityArray.splice(1,1,1);",
							"    descriptorRefIdentityArray.splice(3,1,1);",
							"    pm.environment.set('descriptorRefIdentityArray',descriptorRefIdentityArray);",
							"}",
							"",
							"pm.environment.set('abmIndex', abmIndex);",
							"",
							"if(descriptorRefIdentityCounter == 0)",
							"{",
							"    console.log('descriptorRefIdentity counter is zero');",
							"    for(let i = 0; i < descriptorRefIdentityArray.length; i++)",
							"    {",
							"        console.log('For loop interation: ' + i);",
							"        console.log('descriptorRefIdentityArray at index: ' + descriptorRefIdentityArray[i]);",
							"        if(descriptorRefIdentityArray[i] == 0)",
							"        {",
							"            switch(i)",
							"            {",
							"                case 0:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[i] + '\\nSource Property: ' + relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[i]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[i]);",
							"                    break;",
							"                case 1:",
							"                    if (abmIndex == 0){",
							"                        break;",
							"                    }",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[i] + '\\nSource Property: ' + relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[i]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[i]);",
							"                    break;",
							"                case 2:",
							"                //For /accountID on company schema",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[0] + '\\nSource Property: ' + relationshipSourcePropertyArray[1]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[0]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[1]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[0]);",
							"                    break;",
							"                case 3:",
							"                //For /accountID on named account schema",
							"                    if (abmIndex == 1){",
							"                        console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[1] + '\\nSource Property: ' + relationshipSourcePropertyArray[1]);",
							"                        pm.environment.set('sourceSchema', schemaIdArray[1]);",
							"                        pm.environment.set('sourceProperty', relationshipSourcePropertyArray[1]);",
							"                        pm.environment.set('namespace', primaryIdentityArray[1]);",
							"                        break;",
							"                    }",
							"                    i++;",
							"                    console.log('relationshipIndex after increment in case 1: ' + relationshipIndex);",
							"                case 4:",
							"                //For activity schema add to list",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\nSource Property: /listOperations/listID');",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('sourceProperty', '/listOperations/listID');",
							"                    pm.environment.set('namespace', '');",
							"                    break;",
							"                case 5:",
							"                //for marketing list",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[7] + '\\nSource Property: ' + relationshipSourcePropertyArray[7]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[7]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[7]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[7]);",
							"                    break;",
							"                case 6:",
							"                //for activity schema add to oppty",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\nSource Property: /opportunityEvent/opportunityID');",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('sourceProperty', '/opportunityEvent/opportunityID');",
							"                    pm.environment.set('namespace', '');",
							"                    break;",
							"                case 7:",
							"                //for oppty",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[3] + '\\nSource Property: ' + relationshipSourcePropertyArray[3]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[3]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[3]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[3]);",
							"                    break;",
							"                case 8:",
							"                //for activity schema status in campaign progression changed",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\nSource Property: /leadOperation/campaignProgression/campaignID');",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('sourceProperty', '/leadOperation/campaignProgression/campaignID');",
							"                    pm.environment.set('namespace', '');",
							"                    break;",
							"                case 9:",
							"                //for campaign/program",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[5] + '\\nSource Property: ' + relationshipSourcePropertyArray[5]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[5]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[5]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[5]);",
							"                    break;",
							"            }",
							"            pm.environment.set('relationshipIndex', i);",
							"            break;",
							"        }",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.warn('Test script called for descriptor reference identity');",
							"",
							"let responseData = JSON.parse(responseBody);",
							"let abmIndex = 0;",
							"let primaryIdentityString = pm.environment.get('namespaceArray');",
							"let primaryIdentityArray = primaryIdentityString.toString().split(\",\");",
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let relationshipSourcePropertyArray = JSON.parse(pm.environment.get('relationshipSourcePropertyArray'));",
							"let descriptorRefIdentityString = pm.environment.get('descriptorRefIdentityArray');",
							"let descriptorRefIdentityArray = descriptorRefIdentityString.toString().split(\",\");",
							"let hasAbm = pm.environment.get('has_abm');",
							"let relationshipIndex = pm.environment.get('relationshipIndex');",
							"pm.environment.set('descriptorRefIdentityCounter', 1);",
							"",
							"if(parseInt(responseData.status) == 400)",
							"{",
							"    let report = responseData.report;",
							"    console.warn('Error with response:\\n' + report['detailed-message']);",
							"    descriptorRefIdentityArray.splice(relationshipIndex, 1, report['detailed-message']);",
							"    pm.environment.set('descriptorRefIdentityArray', descriptorRefIdentityArray);",
							"}",
							"",
							"//If we have a response with data, save what we added to the mixinArray so we don't repeat later",
							"if(responseData['@id'])",
							"{",
							"    descriptorRefIdentityArray.splice(relationshipIndex, 1, responseData['@id']);",
							"    console.log('relationship ' + descriptorRefIdentityArray[relationshipIndex] + ' successfully added to array:\\n' + descriptorRefIdentityArray.join());",
							"    pm.environment.set('descriptorRefIdentityArray', descriptorRefIdentityArray);",
							"}",
							"",
							"//set index for ABM as there are a few calls to use it",
							"if (hasAbm == 'true')",
							"{",
							"    abmIndex = 1;",
							"}",
							"pm.environment.set('abmIndex', abmIndex);",
							"",
							"//Check to see if all array elements exist yet or if we need to create more",
							"console.log('descriptorRefIdentityArray before check:\\n' + descriptorRefIdentityArray.join());",
							"let areRelationshipsCreated = checkIfRelationshipsAreCreated(descriptorRefIdentityArray);",
							"",
							"if(!areRelationshipsCreated)",
							"{",
							"    while(relationshipIndex < descriptorRefIdentityArray.length)",
							"    {",
							"        console.log('while loop hit, relationshipIndex is: ' + relationshipIndex + '\\ndescriptorRefIdentityArray at index: ' + descriptorRefIdentityArray[relationshipIndex]);",
							"        if(descriptorRefIdentityArray[relationshipIndex] == 0)",
							"        {",
							"            switch(relationshipIndex)",
							"            {",
							"                case 0:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[relationshipIndex] + '\\nSource Property: ' + relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[relationshipIndex]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[relationshipIndex]);",
							"                    break;",
							"                case 1:",
							"                    if (abmIndex == 1){",
							"                        console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[relationshipIndex] + '\\nSource Property: ' + relationshipSourcePropertyArray[8]);",
							"                        pm.environment.set('sourceSchema', schemaIdArray[relationshipIndex]);",
							"                        pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                        pm.environment.set('namespace', primaryIdentityArray[relationshipIndex]);",
							"                        break;",
							"                    }",
							"                    relationshipIndex++;",
							"                    console.log('relationshipIndex after increment in case 1: ' + relationshipIndex);",
							"                case 2:",
							"                //For /accountID on company schema",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[0] + '\\nSource Property: ' + relationshipSourcePropertyArray[1]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[0]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[1]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[0]);",
							"                    break;",
							"                case 3:",
							"                //For /accountID on named account schema",
							"                    if (abmIndex == 1){",
							"                        console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[1] + '\\nSource Property: ' + relationshipSourcePropertyArray[1]);",
							"                        pm.environment.set('sourceSchema', schemaIdArray[1]);",
							"                        pm.environment.set('sourceProperty', relationshipSourcePropertyArray[1]);",
							"                        pm.environment.set('namespace', primaryIdentityArray[1]);",
							"                        break;",
							"                    }",
							"                    relationshipIndex++;",
							"                    console.log('relationshipIndex after increment in case 1: ' + relationshipIndex);",
							"                case 4:",
							"                //For activity schema add to list",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\nSource Property: /listOperations/listID');",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('sourceProperty', '/listOperations/listID');",
							"                    pm.environment.set('namespace', primaryIdentityArray[7]);",
							"                    break;",
							"                case 5:",
							"                //for marketing list",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[7] + '\\nSource Property: ' + relationshipSourcePropertyArray[7]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[7]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[7]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[7]);",
							"                    break;",
							"                case 6:",
							"                //for activity schema add to oppty",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\nSource Property: /opportunityEvent/opportunityID');",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('sourceProperty', '/opportunityEvent/opportunityID');",
							"                    pm.environment.set('namespace', primaryIdentityArray[3]);",
							"                    break;",
							"                case 7:",
							"                //for oppty",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[3] + '\\nSource Property: ' + relationshipSourcePropertyArray[3]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[3]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[3]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[3]);",
							"                    break;",
							"                case 8:",
							"                //for activity schema status in campaign progression changed",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\nSource Property: /leadOperation/campaignProgression/campaignID');",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('sourceProperty', '/leadOperation/campaignProgression/campaignID');",
							"                    pm.environment.set('namespace', primaryIdentityArray[5]);",
							"                    break;",
							"                case 9:",
							"                //for campaign/program",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[5] + '\\nSource Property: ' + relationshipSourcePropertyArray[5]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[5]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[5]);",
							"                    pm.environment.set('namespace', primaryIdentityArray[5]);",
							"                    break;",
							"            }",
							"            pm.environment.set('relationshipIndex', relationshipIndex);",
							"            relationshipIndex++;",
							"            break;",
							"        }",
							"        relationshipIndex++;",
							"    }",
							"    postman.setNextRequest(pm.info.requestName);",
							"} else {",
							"    console.log('All descriptor reference identities are created. Moving to adding legacy relationships.');",
							"    postman.setNextRequest('Add Legacy Relationships');",
							"}",
							"",
							"//===============================Functions===============================\\\\",
							"function checkIfRelationshipsAreCreated (arrayToCheck)",
							"{",
							"    console.log('checking if all descriptor reference identities are created or not.')",
							"    for(let i = 0; i < arrayToCheck.length; i++) ",
							"    {",
							"        console.log('for loop index inside check: ' + i);",
							"        console.log('array to check at index: ' + arrayToCheck[i]);",
							"        if(arrayToCheck[i] == 0)",
							"        {",
							"            console.warn('Found a descriptor reference identity that needs to be created, returning false');",
							"            return false;",
							"        }",
							"    }",
							"    console.log('all descriptor reference identities have been checked and are created. Returning true.')",
							"    return true;",
							"}",
							"//===============================Functions===============================\\\\"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm-id+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"@type\": \"xdm:descriptorReferenceIdentity\",\n  \"xdm:sourceSchema\": \"{{sourceSchema}}\",\n  \"xdm:sourceVersion\": 1,\n  \"xdm:sourceProperty\": \"{{sourceProperty}}\",\n  \"xdm:identityNamespace\": \"{{namespace}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/descriptors",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"descriptors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Legacy Relationships",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.warn('pre-request script called for legacy relationships');",
							"",
							"pm.environment.set('marketoEntityArray', '[\"Company\",\"Account\",\"People\",\"Opportunities\",\"Opportunity\",\"Programs\",\"Program\",\"Lists\",\"List\",\"Activity\",\"Parent\",\"Child\"]');",
							"let abmIndex = 0;",
							"let primaryIdentityString = pm.environment.get('namespaceArray');",
							"let primaryIdentityArray = primaryIdentityString.toString().split(\",\");",
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let relationshipSourcePropertyArray = JSON.parse(pm.environment.get('relationshipSourcePropertyArray'));",
							"let relationshipDestinationPropertyArray = JSON.parse(pm.environment.get('relationshipDestinationPropertyArray'));",
							"let legacyRelationshipCounter = parseInt(pm.environment.get('legacyRelationshipCounter'));",
							"let marketoEntityArray = JSON.parse(pm.environment.get('marketoEntityArray'));",
							"let legacyRelationshipString = pm.environment.get('legacyRelationshipArray');",
							"let legacyRelationshipArray = legacyRelationshipString.toString().split(\",\");",
							"let hasAbm = pm.environment.get('has_abm');",
							"let relationshipIndex = pm.environment.get('relationshipIndex');",
							"",
							"//set index for ABM as there are a few calls to use it",
							"if (hasAbm == 'true')",
							"{",
							"    abmIndex = 1;",
							"}",
							"",
							"if(abmIndex == 0 && legacyRelationshipCounter == 0)",
							"{",
							"    legacyRelationshipArray.splice(1,0,1);",
							"    pm.environment.set('legacyRelationshipArray',legacyRelationshipArray);",
							"}",
							"",
							"pm.environment.set('abmIndex', abmIndex);",
							"",
							"if(legacyRelationshipCounter == 0)",
							"{",
							"    console.log('legacy relationship counter is zero');",
							"    for(let i = 0; i < legacyRelationshipArray.length; i++)",
							"    {",
							"        console.log('For loop interation: ' + i);",
							"        console.log('legacyRelationshipArray at index: ' + legacyRelationshipArray[i]);",
							"        if(legacyRelationshipArray[i] == 0)",
							"        {",
							"            switch(i)",
							"            {",
							"                case 0:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[i] + '\\ndestinationSchema: ' + schemaIdArray[i] + '\\nSource Property: ' + relationshipSourcePropertyArray[i] + '\\nDestination Property: ' + relationshipDestinationPropertyArray[i]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[i]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[i]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[0]);",
							"                    break;",
							"                case 1:",
							"                    if (abmIndex == 0){",
							"                        break;",
							"                    }",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[i] + '\\ndestinationSchema: ' + schemaIdArray[i] + '\\nSource Property: ' + relationshipSourcePropertyArray[8] + '\\nDestination Property: ' + relationshipDestinationPropertyArray[0]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[i]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[i]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[0]);",
							"                    break;",
							"                case 2:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\ndestinationSchema: ' + schemaIdArray[7]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[7]);",
							"                    pm.environment.set('sourceProperty', '/listOperations/listID');",
							"                    pm.environment.set('destinationProperty', '/marketingListID');",
							"                    break;",
							"                case 3:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\ndestinationSchema: ' + schemaIdArray[3]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[3]);",
							"                    pm.environment.set('sourceProperty', '/opportunityEvent/opportunityID');",
							"                    pm.environment.set('destinationProperty', '/opportunityID');",
							"                    break;",
							"                case 4:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\ndestinationSchema: ' + schemaIdArray[5]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[5]);",
							"                    pm.environment.set('sourceProperty', '/leadOperation/campaignProgression/campaignID');",
							"                    pm.environment.set('destinationProperty', '/campaignID');",
							"                    break;",
							"            }",
							"            pm.environment.set('relationshipIndex', i);",
							"            break;",
							"        }",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.warn('Test script called for legacy relationships');",
							"",
							"let responseData = JSON.parse(responseBody);",
							"let abmIndex = 0;",
							"let primaryIdentityString = pm.environment.get('namespaceArray');",
							"let primaryIdentityArray = primaryIdentityString.toString().split(\",\");",
							"let schemaIdString = pm.environment.get('schemaIdArray');",
							"let schemaIdArray = schemaIdString.toString().split(\",\");",
							"let relationshipSourcePropertyArray = JSON.parse(pm.environment.get('relationshipSourcePropertyArray'));",
							"let relationshipDestinationPropertyArray = JSON.parse(pm.environment.get('relationshipDestinationPropertyArray'));",
							"let marketoEntityArray = JSON.parse(pm.environment.get('marketoEntityArray'));",
							"let legacyRelationshipString = pm.environment.get('legacyRelationshipArray');",
							"let legacyRelationshipArray = legacyRelationshipString.toString().split(\",\");",
							"let hasAbm = pm.environment.get('has_abm');",
							"let relationshipIndex = pm.environment.get('relationshipIndex');",
							"pm.environment.set('legacyRelationshipCounter', 1);",
							"",
							"if(parseInt(responseData.status) == 400)",
							"{",
							"    let report = responseData.report;",
							"    console.warn('Error with response:\\n' + report['detailed-message']);",
							"    legacyRelationshipArray.splice(relationshipIndex, 1, report['detailed-message']);",
							"    pm.environment.set('legacyRelationshipArray', legacyRelationshipArray);",
							"}",
							"",
							"//If we have a response with data, save what we added to the mixinArray so we don't repeat later",
							"if(responseData['@id'])",
							"{",
							"    legacyRelationshipArray.splice(relationshipIndex, 1, responseData['@id']);",
							"    console.log('relationship ' + legacyRelationshipArray[relationshipIndex] + ' successfully added to array:\\n' + legacyRelationshipArray.join());",
							"    pm.environment.set('legacyRelationshipArray', legacyRelationshipArray);",
							"}",
							"",
							"//set index for ABM as there are a few calls to use it",
							"if (hasAbm == 'true')",
							"{",
							"    abmIndex = 1;",
							"}",
							"pm.environment.set('abmIndex', abmIndex);",
							"",
							"//Check to see if all array elements exist yet or if we need to create more",
							"console.log('legacyRelationshipArray before check:\\n' + legacyRelationshipArray.join());",
							"let areRelationshipsCreated = checkIfRelationshipsAreCreated(legacyRelationshipArray);",
							"",
							"if(!areRelationshipsCreated)",
							"{",
							"    while(relationshipIndex < legacyRelationshipArray.length)",
							"    {",
							"        console.log('while loop hit, relationshipIndex is: ' + relationshipIndex + '\\nlegacyRelationshipArray at index: ' + legacyRelationshipArray[relationshipIndex]);",
							"        if(legacyRelationshipArray[relationshipIndex] == 0)",
							"        {",
							"            switch(relationshipIndex)",
							"            {",
							"                case 0:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[relationshipIndex] + '\\ndestinationSchema: ' + schemaIdArray[relationshipIndex] + '\\nSource Property: ' + relationshipSourcePropertyArray[8] + '\\nDestination Property: ' + relationshipDestinationPropertyArray[0]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[relationshipIndex]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[relationshipIndex]);",
							"                    pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                    pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[0]);",
							"                    break;",
							"                case 1:",
							"                    if (abmIndex == 1){",
							"                        console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[relationshipIndex] + '\\ndestinationSchema: ' + schemaIdArray[relationshipIndex] + '\\nSource Property: ' + relationshipSourcePropertyArray[8] + '\\nDestination Property: ' + relationshipDestinationPropertyArray[0]);",
							"                        pm.environment.set('sourceSchema', schemaIdArray[relationshipIndex]);",
							"                        pm.environment.set('destinationSchema', schemaIdArray[relationshipIndex]);",
							"                        pm.environment.set('sourceProperty', relationshipSourcePropertyArray[8]);",
							"                        pm.environment.set('destinationProperty', relationshipDestinationPropertyArray[0]);",
							"                        break;",
							"                    }",
							"                    relationshipIndex++;",
							"                    console.log('relationshipIndex atfer increment in case 1: ' + relationshipIndex);",
							"                case 2:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\ndestinationSchema: ' + schemaIdArray[7]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[7]);",
							"                    pm.environment.set('sourceProperty', '/listOperations/listID');",
							"                    pm.environment.set('destinationProperty', '/marketingListID');",
							"                    break;",
							"                case 3:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\ndestinationSchema: ' + schemaIdArray[3]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[3]);",
							"                    pm.environment.set('sourceProperty', '/opportunityEvent/opportunityID');",
							"                    pm.environment.set('destinationProperty', '/opportunityID');",
							"                    break;",
							"                case 4:",
							"                    console.log('Setting legacy relationship info: ' + '\\nsourceSchema: ' + schemaIdArray[9] + '\\ndestinationSchema: ' + schemaIdArray[5]);",
							"                    pm.environment.set('sourceSchema', schemaIdArray[9]);",
							"                    pm.environment.set('destinationSchema', schemaIdArray[5]);",
							"                    pm.environment.set('sourceProperty', '/leadOperation/campaignProgression/campaignID');",
							"                    pm.environment.set('destinationProperty', '/campaignID');",
							"                    break;",
							"            }",
							"            pm.environment.set('relationshipIndex', relationshipIndex);",
							"            relationshipIndex++;",
							"            break;",
							"        }",
							"        relationshipIndex++;",
							"    }",
							"    postman.setNextRequest(pm.info.requestName);",
							"} else {",
							"    console.log('All legacy relationships are created. Moving to enabling profile.');",
							"    postman.setNextRequest('Enable Profile');",
							"}",
							"",
							"//===============================Functions===============================\\\\",
							"function checkIfRelationshipsAreCreated (arrayToCheck)",
							"{",
							"    console.log('checking if all relationships are created or not.')",
							"    for(let i = 0; i < arrayToCheck.length; i++) ",
							"    {",
							"        console.log('for loop index inside check: ' + i);",
							"        console.log('array to check at index: ' + arrayToCheck[i]);",
							"        if(arrayToCheck[i] == 0)",
							"        {",
							"            console.warn('Found a relationship that needs to be created, returning false');",
							"            return false;",
							"        }",
							"    }",
							"    console.log('all relationships have been checked and are created. Returning true.')",
							"    return true;",
							"}",
							"//===============================Functions===============================\\\\"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm-id+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"@type\": \"xdm:descriptorOneToOne\",\n    \"xdm:sourceSchema\": \"{{sourceSchema}}\",\n    \"xdm:sourceVersion\": 1,\n    \"xdm:sourceProperty\": \"{{sourceProperty}}\",\n    \"xdm:destinationSchema\": \"{{destinationSchema}}\",\n    \"xdm:destinationVersion\": 1,\n    \"xdm:destinationProperty\": \"{{destinationProperty}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/descriptors",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"descriptors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable Profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.warn('pre-request script of enabling profile');",
							"let schemaAltIdString = pm.environment.get('schemaAltIdArray');",
							"let schemaAltIdArray = schemaAltIdString.toString().split(\",\");",
							"let profileCounter = parseInt(pm.environment.get('profileCounter'));",
							"let hasAbm = pm.environment.get('has_abm');",
							"let profileEnabledString = pm.environment.get('profileEnabledArray');",
							"let profileEnabledArray = profileEnabledString.toString().split(\",\");",
							"console.log('profileCounter: ' + profileCounter);",
							"",
							"if(profileCounter == 0)",
							"{",
							"    pm.environment.set('schemaAltId', schemaAltIdArray[profileCounter]);",
							"}",
							"",
							"if(profileCounter == 0 && hasAbm == 'false')",
							"{",
							"    profileEnabledArray.splice(1,1,1);",
							"    pm.environment.set('profileEnabledArray',profileEnabledArray);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.warn('test script of enabling profile')",
							"let schemaAltIdString = pm.environment.get('schemaAltIdArray');",
							"let schemaAltIdArray = schemaAltIdString.toString().split(\",\");",
							"let profileEnabledString = pm.environment.get('profileEnabledArray');",
							"let profileEnabledArray = profileEnabledString.toString().split(\",\");",
							"let profileCounter = parseInt(pm.environment.get('profileCounter'));",
							"let responseData = JSON.parse(responseBody);",
							"",
							"if (responseData['@id'])",
							"{",
							"    console.log('Profile Enabling Successful, response ID: ' + responseData['@id']);",
							"    profileEnabledArray.splice(profileCounter, 1, responseData['@id']);",
							"    pm.environment.set('profileEnabledArray',profileEnabledArray);",
							"}",
							"",
							"while(profileCounter < profileEnabledArray.length)",
							"{",
							"    if(profileEnabledArray[profileCounter] == 0)",
							"    {",
							"        console.log('Found profile that needs enabled on schema: ' + schemaAltIdArray[profileCounter]);",
							"        pm.environment.set('schemaAltId', schemaAltIdArray[profileCounter]);",
							"        profileCounter++;",
							"        postman.setNextRequest(pm.info.requestName);",
							"        break;",
							"    } ",
							"    profileCounter++;",
							"}",
							"console.log('Profile Counter: ' + profileCounter);",
							"pm.environment.set('profileCounter', profileCounter);",
							"if(profileCounter > profileEnabledArray.length)",
							"{",
							"    pm.environment.unset('namespaceArray');",
							"    pm.environment.unset('secondaryNamespaceArray');",
							"    pm.environment.unset('mixinArray');",
							"    pm.environment.unset('relationshipArray');",
							"    pm.environment.unset('profileEnabledArray');",
							"    pm.environment.unset('schemaIdArray');",
							"    pm.environment.unset('schemaAltIdArray');",
							"    pm.environment.unset('discoveredEntityArray');",
							"    pm.environment.unset('relationshipSchemaArray');",
							"    pm.environment.unset('relationshipSourcePropertyArray');",
							"    pm.environment.unset('relationshipDestinationPropertyArray');",
							"    pm.environment.unset('mixinIdArray');",
							"    pm.environment.unset('marketoEntityArray');",
							"    pm.environment.unset('classIdArray');",
							"    pm.environment.unset('sourcePropertyArray');",
							"    pm.environment.unset('resultsArrayLength');",
							"    pm.environment.unset('resultsArray');",
							"    pm.environment.unset('numberToCreate');",
							"    pm.environment.unset('numOfMixinsToCreate');",
							"    pm.environment.unset('entityMixinArray');",
							"    pm.environment.unset('counter');",
							"    pm.environment.unset('mixinCounter');",
							"    pm.environment.unset('identityCounter');",
							"    pm.environment.unset('profileCounter');",
							"    pm.environment.unset('relationshipCounter');",
							"    pm.environment.unset('hasRemovedAbmElement');",
							"    pm.environment.unset('schemaName');",
							"    pm.environment.unset('classId');",
							"    pm.environment.unset('schemaAltId');",
							"    pm.environment.unset('mixinId');",
							"    pm.environment.unset('mixinIndex');",
							"    pm.environment.unset('primaryIdentityArray');",
							"    pm.environment.unset('secondaryIdentityArray');",
							"    pm.environment.unset('identityArray');",
							"    pm.environment.unset('schemasToAddIdentitiesTo');",
							"    pm.environment.unset('schemaId');",
							"    pm.environment.unset('sourceProperty');",
							"    pm.environment.unset('namespace');",
							"    pm.environment.unset('isPrimary');",
							"    pm.environment.unset('abmIndex');",
							"    pm.environment.unset('sourceSchema');",
							"    pm.environment.unset('destinationSchema');",
							"    pm.environment.unset('destinationNamespace');",
							"    pm.environment.unset('destinationToSouceTitle');",
							"    pm.environment.unset('sourceToDestinationTitle');",
							"    pm.environment.unset('relationshipIndex');",
							"    pm.environment.unset('destinationProperty');",
							"    pm.environment.unset('hasSecondary');",
							"    postman.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "x-gw-ims-org-id",
						"value": "{{IMS_ORG}}",
						"type": "text"
					},
					{
						"key": "x-sandbox-name",
						"value": "{{SANDBOX_NAME}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.adobe.xdm-id+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n  \"op\": \"add\",\n  \"path\": \"/meta:immutableTags\",\n  \"value\": [\"union\"]\n}]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PLATFORM_URL}}/data/foundation/schemaregistry/tenant/schemas/{{schemaAltId}}",
					"protocol": "https",
					"host": [
						"{{PLATFORM_URL}}"
					],
					"path": [
						"data",
						"foundation",
						"schemaregistry",
						"tenant",
						"schemas",
						"{{schemaAltId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}